{"version":3,"sources":["turbopack:///[project]/src/app/myaccount-customer/MyAccountCustomer.jsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport data from \"../data/myaccount.json\";\nimport furnitureData from \"../data/furnitureData.json\";\nimport HeaderFile from '../components/Header';\nimport Features from \"../components/Features\";\nimport Select from 'react-select';\nimport toast, { Toaster } from \"react-hot-toast\";\n\nconst MyAccountCustomer = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    regions: [],\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    pincode: \"\",\n    budgetMin: \"\",\n    budgetMax: \"\",\n    propertyType: [],\n    savedSearches: [],\n    inquiryCount: 0\n  });\n  const [activeTab, setActiveTab] = useState(\"Profile\");\n\n  // Check for tab parameter in URL\n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const urlParams = new URLSearchParams(window.location.search);\n      const tab = urlParams.get('tab');\n      if (tab) {\n        setActiveTab(tab);\n      }\n    }\n  }, []);\n  const [newSavedSearch, setNewSavedSearch] = useState({ type: \"\", budgetMax: \"\" });\n  const [regionOptions, setRegionOptions] = useState([]);\n  const [loadingRegions, setLoadingRegions] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [regionIdMap, setRegionIdMap] = useState({}); // Map region names to IDs\n  const [customerData, setCustomerData] = useState(null);\n  const [customerLoading, setCustomerLoading] = useState(false);\n  const [customerImage, setCustomerImage] = useState(null);\n  const [favoriteProperties, setFavoriteProperties] = useState(new Set());\n  const [isLoadingProfileData, setIsLoadingProfileData] = useState(false);\n  const propertyTypeOptions = [\"apartment\", \"commercial\", \"plot\", \"villa\", \"house\"];\n\n  // Logout function\n  const handleLogout = () => {\n    // Clear token from localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('token');\n      localStorage.removeItem('authToken');\n    }\n    // Redirect to homepage\n    window.location.href = '/';\n  };\n\n  // Debug: Monitor formData changes\n  useEffect(() => {\n    console.log('Customer - FormData updated:', formData);\n  }, [formData]);\n\n  // Load phone from token immediately on component mount\n  useEffect(() => {\n    const loadPhoneFromToken = () => {\n      try {\n        const token = localStorage.getItem('token') || localStorage.getItem('authToken');\n        if (token) {\n          const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n          if (tokenPayload.phone && !formData.phone) {\n            console.log('Customer - Setting phone from token:', tokenPayload.phone);\n            setFormData(prev => ({ ...prev, phone: tokenPayload.phone }));\n          }\n        }\n      } catch (error) {\n        console.error('Customer - Error loading phone from token:', error);\n      }\n    };\n    \n    loadPhoneFromToken();\n  }, []); // Only run once on mount\n\n  // Load existing customer data after regions are loaded\n  useEffect(() => {\n    const loadCustomerData = async () => {\n      try {\n        setIsLoadingProfileData(true);\n        const token = localStorage.getItem('token') || localStorage.getItem('authToken');\n        console.log('Customer - Token from localStorage:', token);\n        if (!token) {\n          console.log('Customer - No token found in localStorage');\n          setIsLoadingProfileData(false);\n          return;\n        }\n\n        // Validate token\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        console.log('Customer - Decoded token payload:', tokenPayload);\n        const currentTime = Math.floor(Date.now() / 1000);\n        \n        if (tokenPayload.exp < currentTime) {\n          console.log('Customer - Token expired, clearing localStorage');\n          localStorage.removeItem('token');\n          localStorage.removeItem('authToken');\n          setIsLoadingProfileData(false);\n          return;\n        }\n\n        // Use fallback URL if environment variable is not set\n        const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'https://broker-adda-be.algofolks.com/api';\n        const response = await fetch(`${apiUrl}/auth/profile`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const profileData = await response.json();\n          console.log('Loaded customer data:', profileData);\n          console.log('Full API response structure:', JSON.stringify(profileData, null, 2));\n          console.log('Inquiry count from API:', profileData.data?.customerDetails?.inquiryCount);\n          console.log('Customer details:', profileData.data?.customerDetails);\n          \n          // Update form data with existing customer information\n          if (profileData.data) {\n            console.log('API Response structure:', profileData.data);\n            console.log('User data:', profileData.data.user);\n            console.log('Additional details:', profileData.data.additionalDetails);\n            \n            // Convert region IDs to names for display\n            const regionIds = profileData.data.additionalDetails?.preferences?.region || [];\n            const regionNames = regionIds.map(regionId => {\n              // Find the region name from the ID\n              const regionName = Object.keys(regionIdMap).find(name => regionIdMap[name] === regionId);\n              return regionName || (typeof regionId === 'string' ? regionId : ''); // fallback to ID if name not found\n            }).filter(name => name !== '');\n\n            // Convert \"residential\" to \"house\" for API compatibility\n            const propertyTypes = (profileData.data.additionalDetails?.preferences?.propertyType || [])\n              .map(type => type === \"residential\" ? \"house\" : type)\n              .filter(type => propertyTypeOptions.includes(type));\n\n            // Try different possible locations for inquiry count\n            const inquiryCount = profileData.data.additionalDetails?.inquiryCount || \n                                profileData.data.inquiryCount || \n                                profileData.inquiryCount || \n                                0;\n\n            // Load customer profile image if available\n            console.log('Full API response for debugging:', JSON.stringify(profileData, null, 2));\n            \n            // Check all possible locations for the image\n            let customerImageUrl = profileData.data.images?.customerImage ||\n                                 profileData.data.user?.profileImage || \n                                 profileData.data.customerDetails?.profileImage ||\n                                 profileData.data.profileImage ||\n                                 profileData.data.additionalDetails?.profileImage;\n\n            console.log('Found customerImageUrl:', customerImageUrl);\n            console.log('Checking specific locations:');\n            console.log('user.profileImage:', profileData.data.user?.profileImage);\n            console.log('customerDetails.profileImage:', profileData.data.customerDetails?.profileImage);\n            console.log('data.profileImage:', profileData.data.profileImage);\n            console.log('images.customerImage:', profileData.data.images?.customerImage);\n            console.log('additionalDetails.profileImage:', profileData.data.additionalDetails?.profileImage);\n\n            // Convert local server path to public URL if needed\n            if (customerImageUrl && customerImageUrl.startsWith('/opt/lampp/htdocs/')) {\n              // Extract the filename from the local path\n              const filename = customerImageUrl.split('/').pop();\n              // Convert to public URL\n              customerImageUrl = `https://broker-adda-be.algofolks.com/uploads/${filename}`;\n              console.log('Converted from local path to:', customerImageUrl);\n            } else if (customerImageUrl && customerImageUrl.startsWith('/uploads/')) {\n              // If it's already a relative path, make it absolute\n              customerImageUrl = `https://broker-adda-be.algofolks.com${customerImageUrl}`;\n              console.log('Converted from relative path to:', customerImageUrl);\n            } else if (customerImageUrl) {\n              console.log('Using original URL:', customerImageUrl);\n            } else {\n              console.log('No customer image found in API response');\n            }\n            console.log('Setting inquiry count to:', inquiryCount);\n            console.log('Tried locations:', {\n              'additionalDetails.inquiryCount': profileData.data.additionalDetails?.inquiryCount,\n              'data.inquiryCount': profileData.data.inquiryCount,\n              'root.inquiryCount': profileData.inquiryCount\n            });\n            \n            setFormData(prev => {\n              console.log('Customer - Before API update - Current phone:', prev.phone);\n              console.log('Customer - API user data:', profileData.data.user);\n              \n              const newPhone = prev.phone || profileData.data.user?.phone || \"\";\n              console.log('Customer - Setting phone to:', newPhone);\n              \n              return {\n                ...prev,\n                name: profileData.data.user?.name || \"\",\n                email: profileData.data.user?.email || \"\",\n                phone: newPhone, // Keep existing phone from token\n                address: profileData.data.user?.address || \"\",\n                city: profileData.data.user?.city || \"\",\n                state: profileData.data.user?.state || \"\",\n                pincode: profileData.data.user?.pincode || \"\",\n                budgetMin: profileData.data.additionalDetails?.preferences?.budgetMin || \"\",\n                budgetMax: profileData.data.additionalDetails?.preferences?.budgetMax || \"\",\n                propertyType: propertyTypes,\n                savedSearches: profileData.data.additionalDetails?.savedSearches || [],\n                inquiryCount: inquiryCount,\n                regions: regionNames\n              };\n            });\n\n            // Set customer image if available\n            if (customerImageUrl) {\n              console.log('Original image path:', profileData.data.images?.customerImage);\n              console.log('Converted customer image URL:', customerImageUrl);\n              setCustomerImage(customerImageUrl);\n            } else {\n              console.log('No customer image found in any location');\n              // Let's also check if there's any image field we missed\n              console.log('All available fields in data:', Object.keys(profileData.data || {}));\n              if (profileData.data.images) {\n                console.log('All fields in images:', Object.keys(profileData.data.images));\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error loading customer data:', error);\n      } finally {\n        setIsLoadingProfileData(false);\n      }\n    };\n\n    // Only load customer data if regions are loaded\n    if (Object.keys(regionIdMap).length > 0) {\n      loadCustomerData();\n    }\n  }, [regionIdMap]);\n\n  // Fetch regions from API\n  useEffect(() => {\n    const fetchRegions = async () => {\n      try {\n        setLoadingRegions(true);\n        const apiUrl = process.env.NEXT_PUBLIC_API_URL || '';\n        const response = await fetch(`${apiUrl}/regions`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        \n        if (response.ok) {\n          const responseData = await response.json();\n          // Extract regions from the nested data structure\n          const regions = responseData?.data?.regions || [];\n          const regionNames = regions.map(region => {\n            if (typeof region === 'string') {\n              return region;\n            } else if (typeof region === 'object' && region !== null) {\n              return region.name || region.region || '';\n            }\n            return '';\n          }).filter(name => name !== '');\n          \n          // Create mapping of region names to IDs\n          const idMap = {};\n          regions.forEach(region => {\n            if (typeof region === 'object' && region !== null && region._id && region.name) {\n              idMap[region.name] = region._id;\n            }\n          });\n          setRegionIdMap(idMap);\n          setRegionOptions(regionNames);\n        } else {\n          console.error('Failed to fetch regions:', response.statusText);\n          // Fallback to hardcoded regions if API fails\n        }\n      } catch (error) {\n        console.error('Error fetching regions:', error);\n        // Fallback to hardcoded regions if API fails\n      } finally {\n        setLoadingRegions(false);\n      }\n    };\n\n    fetchRegions();\n  }, []);\n\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleFileChange = (e) => {\n    const { name, files } = e.target;\n    if (name === 'customerImage') {\n      setCustomerImage(files[0]);\n    }\n  };\n\n  const handleRegionChange = (selectedOptions) => {\n    const selectedValues = selectedOptions ? selectedOptions.map(option => option.value) : [];\n    setFormData((prev) => ({ ...prev, regions: selectedValues }));\n  };\n\n  const handlePreferenceChange = (selectedOptions) => {\n    const selectedValues = selectedOptions ? selectedOptions.map(option => option.value) : [];\n    setFormData((prev) => ({ ...prev, preferences: selectedValues }));\n  };\n\n  const handlePropertyTypeChange = (selectedOptions) => {\n    const selectedValues = selectedOptions ? selectedOptions.map(option => option.value) : [];\n    setFormData((prev) => ({ ...prev, propertyType: selectedValues }));\n  };\n\n  const handleSavedSearchField = (e) => {\n    const { name, value } = e.target;\n    setNewSavedSearch(prev => ({ ...prev, [name]: value }));\n  };\n\n  const addSavedSearch = (e) => {\n    e.preventDefault();\n    if (!newSavedSearch.type || !newSavedSearch.budgetMax) return;\n    setFormData(prev => ({\n      ...prev,\n      savedSearches: [...prev.savedSearches, {\n        type: newSavedSearch.type,\n        budgetMax: Number(newSavedSearch.budgetMax)\n      }]\n    }));\n    setNewSavedSearch({ type: \"\", budgetMax: \"\" });\n  };\n\n  const removeSavedSearch = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      savedSearches: prev.savedSearches.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Toggle favorite property\n  const toggleFavorite = (propertyId) => {\n    setFavoriteProperties(prev => {\n      const newFavorites = new Set(prev);\n      if (newFavorites.has(propertyId)) {\n        newFavorites.delete(propertyId);\n      } else {\n        newFavorites.add(propertyId);\n      }\n      return newFavorites;\n    });\n  };\n\n  // Function to fetch customer data by ID\n  const fetchCustomerById = async (customerId) => {\n    if (!customerId) return;\n    \n    setCustomerLoading(true);\n    try {\n      const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'https://broker-adda-be.algofolks.com/api';\n      const response = await fetch(`${apiUrl}/customers/${customerId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setCustomerData(data);\n        console.log('Customer data fetched:', data);\n        toast.success('Customer data loaded successfully!');\n        \n        // Populate form with fetched data\n        if (data.data) {\n          console.log('Customer by ID response:', data.data);\n          setFormData(prev => ({\n            ...prev,\n            name: data.data.user?.name || data.data.name || prev.name,\n            email: data.data.user?.email || data.data.email || prev.email,\n            phone: data.data.user?.phone || data.data.phone || prev.phone,\n            address: data.data.user?.address || data.data.address || prev.address,\n            city: data.data.user?.city || data.data.city || prev.city,\n            state: data.data.user?.state || data.data.state || prev.state,\n            pincode: data.data.user?.pincode || data.data.pincode || prev.pincode,\n            budgetMin: data.data.additionalDetails?.preferences?.budgetMin || data.data.customerDetails?.preferences?.budgetMin || prev.budgetMin,\n            budgetMax: data.data.additionalDetails?.preferences?.budgetMax || data.data.customerDetails?.preferences?.budgetMax || prev.budgetMax,\n            propertyType: data.data.additionalDetails?.preferences?.propertyType || data.data.customerDetails?.preferences?.propertyType || prev.propertyType,\n            savedSearches: data.data.additionalDetails?.savedSearches || data.data.customerDetails?.savedSearches || prev.savedSearches,\n            inquiryCount: data.data.additionalDetails?.inquiryCount || data.data.customerDetails?.inquiryCount || prev.inquiryCount\n          }));\n        }\n      } else {\n        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));\n        toast.error(errorData.message || `Failed to fetch customer data (${response.status})`);\n        console.error('Failed to fetch customer data:', errorData);\n      }\n    } catch (error) {\n      console.error('Error fetching customer data:', error);\n      toast.error(\"Network error. Please try again.\");\n    } finally {\n      setCustomerLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Get authentication token from localStorage\n      const token = localStorage.getItem('token') || localStorage.getItem('authToken');\n      \n      if (!token) {\n        toast.error(\"No authentication token found. Please login again.\");\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Validate token\n      try {\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Math.floor(Date.now() / 1000);\n        \n        if (tokenPayload.exp < currentTime) {\n          toast.error(\"Your session has expired. Please login again.\");\n          setIsSubmitting(false);\n          return;\n        }\n      } catch (error) {\n        toast.error(\"Invalid authentication token. Please login again.\");\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Convert region names to IDs - handle both names and IDs\n      const regionIds = formData.regions.map(region => {\n        // If it's already an ID (starts with ObjectId pattern), return as is\n        if (typeof region === 'string' && region.length === 24 && /^[0-9a-fA-F]{24}$/.test(region)) {\n          return region;\n        }\n        // Otherwise, look up the ID from the mapping\n        return regionIdMap[region];\n      }).filter(Boolean);\n      \n      console.log('Form data regions:', formData.regions);\n      console.log('Region ID map:', regionIdMap);\n      console.log('Converted region IDs:', regionIds);\n\n      // Filter property types to only include valid ones\n      const validPropertyTypes = formData.propertyType.filter(type => \n        propertyTypeOptions.includes(type)\n      );\n\n      // Prepare the data according to API structure\n      const submitData = new FormData();\n      submitData.append('phone', formData.phone);\n      submitData.append('name', formData.name);\n      submitData.append('email', formData.email);\n      \n      // Add customer details\n      submitData.append('customerDetails[preferences][budgetMin]', formData.budgetMin ? Number(formData.budgetMin) : '');\n      submitData.append('customerDetails[preferences][budgetMax]', formData.budgetMax ? Number(formData.budgetMax) : '');\n      \n      // Add property types\n      validPropertyTypes.forEach((type, index) => {\n        submitData.append(`customerDetails[preferences][propertyType][${index}]`, type);\n      });\n      \n      // Add regions\n      regionIds.forEach((regionId, index) => {\n        submitData.append(`customerDetails[preferences][region][${index}]`, regionId);\n      });\n      \n      // Add saved searches\n      formData.savedSearches.forEach((search, index) => {\n        submitData.append(`customerDetails[savedSearches][${index}][type]`, search.type);\n        submitData.append(`customerDetails[savedSearches][${index}][budgetMax]`, search.budgetMax);\n      });\n      \n      submitData.append('customerDetails[inquiryCount]', formData.inquiryCount || 0);\n      \n      // Add customer image if selected\n      if (customerImage && typeof customerImage !== 'string') {\n        submitData.append('customerImage', customerImage);\n      }\n\n      console.log('Form data saved searches:', formData.savedSearches);\n      console.log('Complete submit data:', submitData);\n      console.log('API URL:', process.env.NEXT_PUBLIC_API_URL);\n      \n      // Use fallback URL if environment variable is not set\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'i';\n      const fullUrl = `${apiUrl}/auth/complete-profile`;\n      console.log('Full URL:', fullUrl);\n\n      const response = await fetch(fullUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        body: submitData\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast.success(\"Profile updated successfully!\");\n        console.log('Profile updated:', result);\n      } else {\n        const errorData = await response.json().catch(() => ({ message: 'Unknown error' }));\n        toast.error(errorData.message || 'Failed to update profile');\n        console.error('Profile update failed:', errorData);\n        console.error('Response status:', response.status);\n        console.error('Response headers:', response.headers);\n      }\n    } catch (error) {\n      console.error('Network error details:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        toast.error(\"Network connection failed. Please check your internet connection and try again.\");\n      } else {\n        toast.error(error.message);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"Dashboard\":\n        return (\n          <div className=\"w-full lg:w-3/4 bg-white  rounded-lg\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Dashboard</h2>\n            \n            {/* Loading State */}\n            {isLoadingProfileData && (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"flex flex-col items-center space-y-4\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"></div>\n                  <p className=\"text-gray-600\">Loading dashboard data...</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Dashboard Content - Only show when not loading */}\n            {!isLoadingProfileData && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"bg-green-50 p-6 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Total Inquiries</h3>\n                <p className=\"text-3xl font-bold text-green-600\">{formData.inquiryCount || 0}</p>\n                <p className=\"text-sm text-gray-600\">Active inquiries</p>\n              </div>\n              <div className=\"bg-blue-50 p-6 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Saved Properties</h3>\n                <p className=\"text-3xl font-bold text-blue-600\">3</p>\n                <p className=\"text-sm text-gray-600\">Properties saved</p>\n              </div>\n              <div className=\"bg-yellow-50 p-6 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Saved Searches</h3>\n                <p className=\"text-3xl font-bold text-yellow-600\">{formData.savedSearches.length}</p>\n                <p className=\"text-sm text-gray-600\">Search criteria saved</p>\n              </div>\n            </div>\n            )}\n          </div>\n        );\n\n      case \"Profile\":\n        return (\n          <div className=\"w-full lg:w-3/4 bg-white rounded-lg\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Profile</h2>\n            \n            {/* Loading State */}\n            {isLoadingProfileData && (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"flex flex-col items-center space-y-4\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600\"></div>\n                  <p className=\"text-gray-600\">Loading profile data...</p>\n                </div>\n              </div>\n            )}\n            \n            {/* Profile Content - Only show when not loading */}\n            {!isLoadingProfileData && (\n              <>\n                {/* Customer Profile Image Upload */}\n                <div className=\"mb-8\">\n                 \n                  <div className=\"flex items-center gap-6\">\n                {/* Current Profile Image Display */}\n                <div className=\"relative\">\n                  <div className=\"w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden\">\n                    {customerImage ? (\n                      <img\n                        src={typeof customerImage === 'string' ? customerImage : URL.createObjectURL(customerImage)}\n                        alt=\"Customer Profile\"\n                        className=\"w-full h-full object-cover\"\n                        onLoad={() => console.log('Image loaded successfully:', customerImage)}\n                        onError={(e) => console.log('Image failed to load:', customerImage, e)}\n                      />\n                    ) : (\n                      <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                      </svg>\n                    )}\n                  </div>\n                  <button\n                    type=\"button\"\n                    className=\"absolute -bottom-1 -right-1 bg-green-600 w-7 h-7 rounded-full flex items-center justify-center hover:bg-green-700 transition-colors\"\n                    onClick={() => document.getElementById('customer-image-upload').click()}\n                  >\n                    <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                    </svg>\n                  </button>\n                  <input\n                    type=\"file\"\n                    name=\"customerImage\"\n                    onChange={handleFileChange}\n                    accept=\".jpg,.jpeg,.png\"\n                    className=\"hidden\"\n                    id=\"customer-image-upload\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <form className=\"space-y-6 \" onSubmit={handleSubmit}>\n              {/* Name & Email (two columns) */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Name <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                    placeholder=\"Enter your full name\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-sm  focus:outline-none  focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Email <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    placeholder=\"Enter your email address\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-sm  focus:outline-none  focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Phone */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  Phone <span className=\"text-green-500\">*</span>\n                </label>\n                <input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleChange}\n                  placeholder=\"Enter your phone number\"\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-sm  focus:outline-none  focus:ring-green-500 focus:border-green-500\"\n                />\n              </div>\n\n              {/* Region React-Select Dropdown */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  Region <span className=\"text-green-500\">*</span>\n                </label>\n                {loadingRegions ? (\n                  <p className=\"text-sm text-gray-500\">Loading regions...</p>\n                ) : (\n                  <Select\n                    isMulti\n                    name=\"regions\"\n                    options={regionOptions.map(region => ({\n                      value: region,\n                      label: region\n                    }))}\n                    value={formData.regions.map(region => ({\n                      value: region,\n                      label: region\n                    }))}\n                    onChange={handleRegionChange}\n                    placeholder=\"Select regions...\"\n                    className=\"react-select-container\"\n                    classNamePrefix=\"react-select\"\n                    styles={{\n                      control: (provided, state) => ({\n                        ...provided,\n                        minHeight: '48px',\n                        border: state.isFocused ? '2px solid #10b981' : '1px solid #d1d5db',\n                        boxShadow: state.isFocused ? '0 0 0 3px rgba(16, 185, 129, 0.1)' : 'none',\n                        '&:hover': {\n                          border: '1px solid #10b981'\n                        }\n                      }),\n                      multiValue: (provided) => ({\n                        ...provided,\n                        backgroundColor: '#dcfce7',\n                        color: '#166534'\n                      }),\n                      multiValueLabel: (provided) => ({\n                        ...provided,\n                        color: '#166534'\n                      }),\n                      multiValueRemove: (provided) => ({\n                        ...provided,\n                        color: '#166534',\n                        '&:hover': {\n                          backgroundColor: '#bbf7d0',\n                          color: '#14532d'\n                        }\n                      })\n                    }}\n                  />\n                )}\n              </div>\n\n              {/* Budget Min/Max */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">Budget Min (₹ Lakhs) <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"budgetMin\"\n                    value={formData.budgetMin}\n                    onChange={handleChange}\n                    placeholder=\"e.g. 25\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-sm focus:outline-none  focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">Budget Max (₹ Lakhs) <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"number\"\n                    name=\"budgetMax\"\n                    value={formData.budgetMax}\n                    onChange={handleChange}\n                    placeholder=\"e.g. 60\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-sm  focus:outline-none  focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Property Type React-Select Dropdown */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Property Type <span className=\"text-green-500\">*</span></label>\n                <Select\n                  isMulti\n                  name=\"propertyType\"\n                  options={propertyTypeOptions.map(type => ({\n                    value: type,\n                    label: type.charAt(0).toUpperCase() + type.slice(1)\n                  }))}\n                  value={formData.propertyType.map(type => ({\n                    value: type,\n                    label: type.charAt(0).toUpperCase() + type.slice(1)\n                  }))}\n                  onChange={handlePropertyTypeChange}\n                  placeholder=\"Select property types...\"\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  styles={{\n                    control: (provided, state) => ({\n                      ...provided,\n                      minHeight: '48px',\n                      border: state.isFocused ? '2px solid #10b981' : '1px solid #d1d5db',\n                      boxShadow: state.isFocused ? '0 0 0 3px rgba(16, 185, 129, 0.1)' : 'none',\n                      '&:hover': {\n                        border: '1px solid #10b981'\n                      }\n                    }),\n                    multiValue: (provided) => ({\n                      ...provided,\n                      backgroundColor: '#dcfce7',\n                      color: '#166534'\n                    }),\n                    multiValueLabel: (provided) => ({\n                      ...provided,\n                      color: '#166534'\n                    }),\n                    multiValueRemove: (provided) => ({\n                      ...provided,\n                      color: '#166534',\n                      '&:hover': {\n                        backgroundColor: '#bbf7d0',\n                        color: '#14532d'\n                      }\n                    })\n                  }}\n                />\n              </div>\n\n\n              {/* Saved Searches */}\n              {/* <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Saved Searche  <span className=\"text-green-500\">*</span>\n                </label>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <input\n                    type=\"text\"\n                    name=\"type\"\n                    value={newSavedSearch.type}\n                    onChange={handleSavedSearchField}\n                    placeholder=\"Type e.g. 2BHK\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                  <input\n                    type=\"number\"\n                    name=\"budgetMax\"\n                    value={newSavedSearch.budgetMax}\n                    onChange={handleSavedSearchField}\n                    placeholder=\"Budget Max (₹)\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <button onClick={addSavedSearch} className=\"mt-3 bg-green-800 text-white py-2 px-4 rounded-lg hover:bg-green-700\">Add Saved Search</button>\n                {formData.savedSearches.length > 0 && (\n                  <div className=\"mt-3 space-y-2\">\n                    {formData.savedSearches.map((s, idx) => (\n                      <div key={idx} className=\"flex items-center justify-between border p-3 rounded-lg\">\n                        <div className=\"text-sm text-gray-800\">{s.type} · ₹{s.budgetMax}</div>\n                        <button type=\"button\" onClick={() => removeSavedSearch(idx)} className=\"text-red-600 text-sm hover:underline\">Remove</button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div> */}\n\n              {/* Inquiry Count (read-only) */}\n              {/* <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Inquiry Count <span className=\"text-green-500\">*</span></label>\n                <input\n                  type=\"number\"\n                  name=\"inquiryCount\"\n                  value={formData.inquiryCount}\n                  readOnly\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600\"\n                />\n              </div> */}\n\n\n              {/* Submit Button */}\n              <div className=\"pt-4 flex justify-end\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className={`py-2 px-6 rounded-lg font-medium focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors cursor-pointer ${\n                    isSubmitting\n                      ? 'bg-gray-400 text-gray-200 cursor-not-allowed'\n                      : 'bg-green-800 text-white hover:bg-green-700'\n                  }`}\n                >\n                  {isSubmitting ? (\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Updating...\n                    </div>\n                  ) : (\n                    'Save Profile'\n                  )}\n                </button>\n              </div>\n            </form>\n              </>\n            )}\n          </div>\n        );\n\n      case \"Saved Properties\":\n        return (\n          <div className=\"w-full lg:w-3/4 bg-white  rounded-lg\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Saved Properties</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow\">\n                <div className=\"relative\">\n                  <img src=\"/images/pexels-binyaminmellish-106399.jpg\" alt=\"Property\" className=\"w-full h-48 object-cover\" />\n                  <button \n                    onClick={() => toggleFavorite('property-1')}\n                    className=\"absolute top-3 right-3 bg-white/90 hover:bg-white p-2 rounded-full shadow-md transition-colors\"\n                  >\n                    <svg className={`w-5 h-5 transition-colors ${favoriteProperties.has('property-1') ? 'text-red-500' : 'text-gray-700'}`} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </div>\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900\">Luxury Villa</h3>\n                  <p className=\"text-gray-600 text-sm\">3BHK, 2000 sq ft</p>\n                  <p className=\"text-green-600 font-semibold\">₹2.5 Cr</p>\n                </div>\n              </div>\n              <div className=\"rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow\">\n                <div className=\"relative\">\n                  <img src=\"/images/istockphoto-1165384568-612x612.jpg\" alt=\"Property\" className=\"w-full h-48 object-cover\" />\n                  <button \n                    onClick={() => toggleFavorite('property-2')}\n                    className=\"absolute top-3 right-3 bg-white/90 hover:bg-white p-2 rounded-full shadow-md transition-colors\"\n                  >\n                    <svg className={`w-5 h-5 transition-colors ${favoriteProperties.has('property-2') ? 'text-red-500' : 'text-gray-700'}`} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </div>\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900\">Modern Apartment</h3>\n                  <p className=\"text-gray-600 text-sm\">2BHK, 1200 sq ft</p>\n                  <p className=\"text-green-600 font-semibold\">₹85 L</p>\n                </div>\n              </div>\n              <div className=\"rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow\">\n                <div className=\"relative\">\n                  <img src=\"/images/realestate2.jpg\" alt=\"Property\" className=\"w-full h-48 object-cover\" />\n                  <button \n                    onClick={() => toggleFavorite('property-3')}\n                    className=\"absolute top-3 right-3 bg-white/90 hover:bg-white p-2 rounded-full shadow-md transition-colors\"\n                  >\n                    <svg className={`w-5 h-5 transition-colors ${favoriteProperties.has('property-3') ? 'text-red-500' : 'text-gray-700'}`} fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </button>\n                </div>\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900\">Commercial Space</h3>\n                  <p className=\"text-gray-600 text-sm\">Office, 5000 sq ft</p>\n                  <p className=\"text-green-600 font-semibold\">₹1.2 Cr</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n\n      default:\n        return (\n          <div className=\"w-full lg:w-3/4 bg-white rounded-lg\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Profile</h2>\n            \n            <form className=\"space-y-6 p-6\" onSubmit={handleSubmit}>\n              {/* Name & Email (two columns) */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Name <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                    placeholder=\"Enter your full name\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Email <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    placeholder=\"Enter your email address\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Phone Field */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  Phone <span className=\"text-green-500\">*</span>\n                </label>\n                <input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={formData.phone}\n                  onChange={handleChange}\n                  placeholder=\"Enter your phone number\"\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                />\n              </div>\n\n              {/* Address Fields */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Address <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"address\"\n                    value={formData.address}\n                    onChange={handleChange}\n                    placeholder=\"Enter your address\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    City <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"city\"\n                    value={formData.city}\n                    onChange={handleChange}\n                    placeholder=\"Enter your city\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    State <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"state\"\n                    value={formData.state}\n                    onChange={handleChange}\n                    placeholder=\"Enter your state\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                    Pincode <span className=\"text-green-500\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"pincode\"\n                    value={formData.pincode}\n                    onChange={handleChange}\n                    placeholder=\"Enter pincode\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Budget Min/Max */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">Budget Min (₹ Lakhs)</label>\n                  <input\n                    type=\"number\"\n                    name=\"budgetMin\"\n                    value={formData.budgetMin}\n                    onChange={handleChange}\n                    placeholder=\"e.g. 25\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-900 mb-2\">Budget Max (₹ Lakhs)</label>\n                  <input\n                    type=\"number\"\n                    name=\"budgetMax\"\n                    value={formData.budgetMax}\n                    onChange={handleChange}\n                    placeholder=\"e.g. 60\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Property Type React-Select Dropdown */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Property Type</label>\n                <Select\n                  isMulti\n                  name=\"propertyType\"\n                  options={propertyTypeOptions.map(type => ({\n                    value: type,\n                    label: type.charAt(0).toUpperCase() + type.slice(1)\n                  }))}\n                  value={formData.propertyType.map(type => ({\n                    value: type,\n                    label: type.charAt(0).toUpperCase() + type.slice(1)\n                  }))}\n                  onChange={handlePropertyTypeChange}\n                  placeholder=\"Select property types...\"\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  styles={{\n                    control: (provided, state) => ({\n                      ...provided,\n                      minHeight: '48px',\n                      border: state.isFocused ? '2px solid #10b981' : '1px solid #d1d5db',\n                      boxShadow: state.isFocused ? '0 0 0 3px rgba(16, 185, 129, 0.1)' : 'none',\n                      '&:hover': {\n                        border: '1px solid #10b981'\n                      }\n                    }),\n                    multiValue: (provided) => ({\n                      ...provided,\n                      backgroundColor: '#dcfce7',\n                      color: '#166534'\n                    }),\n                    multiValueLabel: (provided) => ({\n                      ...provided,\n                      color: '#166534'\n                    }),\n                    multiValueRemove: (provided) => ({\n                      ...provided,\n                      color: '#166534',\n                      '&:hover': {\n                        backgroundColor: '#bbf7d0',\n                        color: '#14532d'\n                      }\n                    })\n                  }}\n                />\n              </div>\n\n              {/* Property Preferences React-Select Dropdown */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">\n                  Property Preferences\n                </label>\n                <Select\n                  isMulti\n                  name=\"preferences\"\n                  options={[\n                    \"2BHK\", \"3BHK\", \"4BHK\", \"Villa\", \"Apartment\", \"Independent House\",\n                    \"Penthouse\", \"Studio\", \"Duplex\", \"Farmhouse\", \"Plot\", \"Commercial\"\n                  ].map(pref => ({\n                    value: pref,\n                    label: pref\n                  }))}\n                  value={formData.preferences.map(pref => ({\n                    value: pref,\n                    label: pref\n                  }))}\n                  onChange={handlePreferenceChange}\n                  placeholder=\"Select property preferences...\"\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  styles={{\n                    control: (provided, state) => ({\n                      ...provided,\n                      minHeight: '48px',\n                      border: state.isFocused ? '2px solid #10b981' : '1px solid #d1d5db',\n                      boxShadow: state.isFocused ? '0 0 0 3px rgba(16, 185, 129, 0.1)' : 'none',\n                      '&:hover': {\n                        border: '1px solid #10b981'\n                      }\n                    }),\n                    multiValue: (provided) => ({\n                      ...provided,\n                      backgroundColor: '#dcfce7',\n                      color: '#166534'\n                    }),\n                    multiValueLabel: (provided) => ({\n                      ...provided,\n                      color: '#166534'\n                    }),\n                    multiValueRemove: (provided) => ({\n                      ...provided,\n                      color: '#166534',\n                      '&:hover': {\n                        backgroundColor: '#bbf7d0',\n                        color: '#14532d'\n                      }\n                    })\n                  }}\n                />\n              </div>\n\n              {/* Saved Searches */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Saved Searches</label>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <input\n                    type=\"text\"\n                    name=\"type\"\n                    value={newSavedSearch.type}\n                    onChange={handleSavedSearchField}\n                    placeholder=\"Type e.g. 2BHK\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                  <input\n                    type=\"number\"\n                    name=\"budgetMax\"\n                    value={newSavedSearch.budgetMax}\n                    onChange={handleSavedSearchField}\n                    placeholder=\"Budget Max (₹)\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  />\n                </div>\n                <button onClick={addSavedSearch} className=\"mt-3 bg-green-800 text-white py-2 px-4 rounded-lg hover:bg-green-700\">Add Saved Search</button>\n                {formData.savedSearches.length > 0 && (\n                  <div className=\"mt-3 space-y-2\">\n                    {formData.savedSearches.map((s, idx) => (\n                      <div key={idx} className=\"flex items-center justify-between border p-3 rounded-lg\">\n                        <div className=\"text-sm text-gray-800\">{s.type} · ₹{s.budgetMax}</div>\n                        <button type=\"button\" onClick={() => removeSavedSearch(idx)} className=\"text-red-600 text-sm hover:underline\">Remove</button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Inquiry Count (read-only) */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-900 mb-2\">Inquiry Count</label>\n                <input\n                  type=\"number\"\n                  name=\"inquiryCount\"\n                  value={formData.inquiryCount}\n                  readOnly\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-600\"\n                />\n              </div>\n\n\n              {/* Submit Button */}\n              <div className=\"pt-4 flex justify-end\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className={`py-2 px-6 rounded-lg font-medium focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors cursor-pointer ${\n                    isSubmitting\n                      ? 'bg-gray-400 text-gray-200 cursor-not-allowed'\n                      : 'bg-green-800 text-white hover:bg-green-700'\n                  }`}\n                >\n                  {isSubmitting ? (\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Updating...\n                    </div>\n                  ) : (\n                    'Save Profile'\n                  )}\n                </button>\n              </div>\n            </form>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <>\n      <Toaster \n        position=\"top-right\"\n        toastOptions={{\n          duration: 4000,\n          style: {\n            background: '#363636',\n            color: '#fff',\n          },\n          success: {\n            duration: 3000,\n            iconTheme: {\n              primary: '#4ade80',\n              secondary: '#fff',\n            },\n          },\n          error: {\n            duration: 4000,\n            iconTheme: {\n              primary: '#ef4444',\n              secondary: '#fff',\n            },\n          },\n        }}\n      />\n      <HeaderFile data={data} />\n      <div className=\"px-6 sm:px-12 lg:px-32 py-12\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Sidebar */}\n            <div className=\"w-full lg:w-1/4 space-y-3\">\n              {[\n                \"Dashboard\",\n                \"Profile\",\n                \"Saved Properties\"\n              ].map((item, idx) => (\n                <button\n                  key={item}\n                  onClick={() => setActiveTab(item)}\n                  className={`w-full text-left px-5 py-3 rounded-lg border cursor-pointer ${\n                    activeTab === item\n                      ? \"bg-yellow-400 text-black font-medium\"\n                      : \"bg-white hover:bg-gray-50 text-black\"\n                  }`}\n                >\n                  {item}\n                </button>\n              ))}\n              <button\n                onClick={handleLogout}\n                className=\"w-full text-left px-5 py-3 rounded-lg border bg-white cursor-pointer\"\n              >\n                Logout\n              </button>\n            </div>\n\n            {/* Content Area */}\n            {renderContent()}\n          </div>\n        </div>\n      </div>\n      \n    </>\n  );\n};\n\nexport default MyAccountCustomer;"],"names":[],"mappings":"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"}