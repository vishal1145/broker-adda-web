{"version":3,"sources":["turbopack:///[project]/src/app/profile/page.jsx","turbopack:///[project]/src/app/profile/components/ViewMode.jsx"],"sourcesContent":["\"use client\";\r\nimport React, { useState, useEffect, useRef, useCallback, Suspense } from \"react\";\r\nimport Select from \"react-select\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport ProtectedRoute from \"../components/ProtectedRoute\";\r\nimport HeaderFile from \"../components/Header\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport ViewModeProfile from \"./components/ViewMode\";\r\n\r\n// Normalize backend file paths to public URLs for images\r\nconst toPublicUrl = (raw) => {\r\n  if (!raw || typeof raw !== \"string\") return raw;\r\n  if (raw.startsWith('/opt/lampp/htdocs/')) {\r\n    const filename = raw.split('/').pop();\r\n    return `https://broker-adda-be.algofolks.com/uploads/${filename}`;\r\n  }\r\n  if (raw.startsWith('/uploads/')) {\r\n    return `https://broker-adda-be.algofolks.com${raw}`;\r\n  }\r\n  return raw;\r\n};\r\n\r\n// Helpers to detect and preview images (for document uploads)\r\nconst isImageFile = (val) => {\r\n  if (!val) return false;\r\n  if (typeof val === 'string') return /\\.(png|jpe?g|webp)$/i.test(val);\r\n  if (val.type) return val.type.startsWith('image/');\r\n  const name = val.name || '';\r\n  return /\\.(png|jpe?g|webp)$/i.test(name);\r\n};\r\n\r\nconst isPdfFile = (val) => {\r\n  if (!val) return false;\r\n  if (typeof val === 'string') return /\\.pdf$/i.test(val);\r\n  if (val.type) return val.type === 'application/pdf';\r\n  const name = val.name || '';\r\n  return /\\.pdf$/i.test(name);\r\n};\r\n\r\nconst getImageSrc = (val) => {\r\n  if (!val) return null;\r\n  if (typeof val === 'string') return toPublicUrl(val);\r\n  try {\r\n    return URL.createObjectURL(val);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst getPdfSrc = (val) => {\r\n  if (!val) return null;\r\n  if (typeof val === 'string') return toPublicUrl(val);\r\n  try {\r\n    return URL.createObjectURL(val);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst Profile = () => {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  const userRole = user?.role || \"broker\";\r\n\r\n  // Get mode from URL parameters (reactive to query changes)\r\n  const searchParams = useSearchParams();\r\n  const [mode, setMode] = useState('create');\r\n\r\n  useEffect(() => {\r\n    const urlMode = searchParams?.get('mode');\r\n    setMode(urlMode || 'create');\r\n  }, [searchParams]);\r\n\r\n  // Derived view flag\r\n  const isViewMode = mode === 'view';\r\n\r\n  // Step management\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const totalSteps = userRole === \"broker\" ? 4 : 2; // Brokers have 4 steps, customers have 2\r\n\r\n  // Broker form data\r\n  const [brokerFormData, setBrokerFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    firmName: \"\",\r\n    regions: [],\r\n    aadharFile: null,\r\n    panFile: null,\r\n    gstFile: null,\r\n    brokerLicenseFile: null,\r\n    companyIdFile: null,\r\n    brokerImage: null,\r\n    // Additional professional fields\r\n    licenseNumber: \"\",\r\n    officeAddress: \"\",\r\n    experience: \"\",\r\n    about: \"\",\r\n    address: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    linkedin: \"\",\r\n    twitter: \"\",\r\n    instagram: \"\",\r\n    facebook: \"\",\r\n    whatsapp: \"\",\r\n    website: \"\",\r\n    specializations: [],\r\n    // Personal details\r\n    gender: \"\",\r\n    dateOfBirth: \"\",\r\n    // Location coordinates\r\n    location: null,\r\n  });\r\n\r\n  // Customer form data\r\n  const [customerFormData, setCustomerFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    budgetMin: \"\",\r\n    budgetMax: \"\",\r\n    propertyType: [],\r\n    inquiryCount: 0,\r\n    customerImage: null,\r\n    // Personal details\r\n    gender: \"\",\r\n    dateOfBirth: \"\",\r\n  });\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [regionsList, setRegionsList] = useState([]);\r\n  const [regionsLoading, setRegionsLoading] = useState(false);\r\n  const [regionsError, setRegionsError] = useState(\"\");\r\n  // Nearest by coordinates mode and data\r\n  const [nearestMode, setNearestMode] = useState(true);\r\n  const [geoCoords, setGeoCoords] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n  const [nearestRegions, setNearestRegions] = useState([]);\r\n  const [nearestRegionsLoading, setNearestRegionsLoading] = useState(false);\r\n  const [nearestRegionsError, setNearestRegionsError] = useState(\"\");\r\n  const [statesList, setStatesList] = useState([\r\n    { value: \"uttar-pradesh\", label: \"Uttar Pradesh\" },\r\n  ]);\r\n  const [citiesList, setCitiesList] = useState([]);\r\n  const [selectedState, setSelectedState] = useState(null);\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [profileLoading, setProfileLoading] = useState(true);\r\n  const [googleLoaded, setGoogleLoaded] = useState(false);\r\n  const [selectedOfficeAddress, setSelectedOfficeAddress] = useState(null);\r\n  const [officeAddressOptions, setOfficeAddressOptions] = useState([]);\r\n  const [isLoadingAddresses, setIsLoadingAddresses] = useState(false);\r\n  const searchTimeoutRef = useRef(null);\r\n  const [budgetError, setBudgetError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [isCheckingEmail, setIsCheckingEmail] = useState(false);\r\n  const [propertyTypeOptions] = useState([\r\n    \"apartment\",\r\n    \"commercial\",\r\n    \"plot\",\r\n    \"villa\",\r\n    \"house\",\r\n  ]);\r\n  const [specializationOptions] = useState([\r\n    \"Residential Sales\",\r\n    \"Commercial Leasing\",\r\n    \"Luxury Homes\",\r\n    \"Investment Properties\",\r\n    \"Rental Properties\",\r\n    \"Land Development\",\r\n    \"Property Management\",\r\n    \"Real Estate Consulting\",\r\n  ]);\r\n\r\n  // Load Google Places API\r\n  useEffect(() => {\r\n    const loadGooglePlaces = () => {\r\n      // Check if already loaded\r\n      if (window.google && window.google.maps && window.google.maps.places) {\r\n        setGoogleLoaded(true);\r\n        return;\r\n      }\r\n\r\n      // Check if script already exists\r\n      const existingScript = document.querySelector(\r\n        'script[src*=\"maps.googleapis.com\"]'\r\n      );\r\n      if (existingScript) {\r\n        existingScript.onload = () => setGoogleLoaded(true);\r\n        return;\r\n      }\r\n\r\n      const script = document.createElement(\"script\");\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY}&libraries=places`;\r\n      script.async = true;\r\n      script.defer = true;\r\n\r\n      script.onload = () => {\r\n        setGoogleLoaded(true);\r\n      };\r\n\r\n      script.onerror = (error) => {\r\n        toast.error(\r\n          \"Failed to load address autocomplete. Please check your API key.\"\r\n        );\r\n      };\r\n\r\n      document.head.appendChild(script);\r\n    };\r\n\r\n    loadGooglePlaces();\r\n  }, []);\r\n\r\n  // Cleanup timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (searchTimeoutRef.current) {\r\n        clearTimeout(searchTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Validate budget when customer form data changes\r\n  useEffect(() => {\r\n    if (\r\n      userRole === \"customer\" &&\r\n      customerFormData.budgetMin &&\r\n      customerFormData.budgetMax\r\n    ) {\r\n      const min = parseFloat(customerFormData.budgetMin);\r\n      const max = parseFloat(customerFormData.budgetMax);\r\n\r\n      if (min > max) {\r\n        setBudgetError(\"Minimum budget cannot be greater than maximum budget\");\r\n      } else {\r\n        setBudgetError(\"\");\r\n      }\r\n    } else if (userRole === \"customer\") {\r\n      setBudgetError(\"\");\r\n    }\r\n  }, [customerFormData.budgetMin, customerFormData.budgetMax, userRole]);\r\n\r\n  // Handle input change for office address search with debouncing\r\n  const handleOfficeAddressInputChange = (inputValue) => {\r\n    // Clear previous timeout\r\n    if (searchTimeoutRef.current) {\r\n      clearTimeout(searchTimeoutRef.current);\r\n    }\r\n\r\n    if (\r\n      !googleLoaded ||\r\n      !window.google ||\r\n      !inputValue ||\r\n      inputValue.length < 1\r\n    ) {\r\n      setOfficeAddressOptions([]);\r\n      return;\r\n    }\r\n\r\n    // Debounce the search by 300ms\r\n    searchTimeoutRef.current = setTimeout(() => {\r\n      setIsLoadingAddresses(true);\r\n\r\n      const service = new window.google.maps.places.AutocompleteService();\r\n      service.getPlacePredictions(\r\n        {\r\n          input: inputValue,\r\n          types: [\"establishment\", \"geocode\"],\r\n          componentRestrictions: { country: \"in\" },\r\n        },\r\n        (predictions, status) => {\r\n          setIsLoadingAddresses(false);\r\n          if (\r\n            status === window.google.maps.places.PlacesServiceStatus.OK &&\r\n            predictions\r\n          ) {\r\n            const options = predictions.map((prediction) => ({\r\n              value: prediction.place_id,\r\n              label: prediction.description,\r\n              placeId: prediction.place_id,\r\n              description: prediction.description,\r\n            }));\r\n            setOfficeAddressOptions(options);\r\n          } else {\r\n            setOfficeAddressOptions([]);\r\n          }\r\n        }\r\n      );\r\n    }, 300);\r\n  };\r\n\r\n  // Auto-fetch nearest only when coordinates are available (not just toggling)\r\n  useEffect(() => {\r\n    const tryFetch = async () => {\r\n      if (!nearestMode) return;\r\n      let { latitude, longitude } = geoCoords || {};\r\n      if (latitude && longitude)\r\n        await loadNearestRegionsByCoords(latitude, longitude, 5);\r\n    };\r\n    tryFetch();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [nearestMode]);\r\n\r\n  // If coords become available while in nearest mode, fetch automatically\r\n  useEffect(() => {\r\n    if (nearestMode && geoCoords?.latitude && geoCoords?.longitude) {\r\n      loadNearestRegionsByCoords(geoCoords.latitude, geoCoords.longitude, 5);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [geoCoords?.latitude, geoCoords?.longitude]);\r\n\r\n  // When navigating to Preferred Regions step, auto-resolve coords and call nearest API\r\n  useEffect(() => {\r\n    const enterStepFetch = async () => {\r\n      const isPreferredRegionsStep = currentStep === 2 && userRole === \"broker\";\r\n      if (!isPreferredRegionsStep || !nearestMode) return;\r\n      let { latitude, longitude } = geoCoords || {};\r\n      try {\r\n        if (\r\n          (!latitude || !longitude) &&\r\n          selectedOfficeAddress &&\r\n          selectedOfficeAddress.placeId &&\r\n          window.google &&\r\n          window.google.maps\r\n        ) {\r\n          const service = new window.google.maps.places.PlacesService(\r\n            document.createElement(\"div\")\r\n          );\r\n          await new Promise((resolve) => {\r\n            service.getDetails(\r\n              { placeId: selectedOfficeAddress.placeId },\r\n              (place, status) => {\r\n                if (\r\n                  status === window.google.maps.places.PlacesServiceStatus.OK &&\r\n                  place &&\r\n                  place.geometry &&\r\n                  place.geometry.location\r\n                ) {\r\n                  latitude = place.geometry.location.lat();\r\n                  longitude = place.geometry.location.lng();\r\n                  setGeoCoords({ latitude, longitude });\r\n                }\r\n                resolve();\r\n              }\r\n            );\r\n          });\r\n        }\r\n        if ((!latitude || !longitude) && window.google && window.google.maps) {\r\n          const stateText = selectedState\r\n            ? selectedState.label || selectedState.value\r\n            : \"\";\r\n          const cityText = selectedCity\r\n            ? selectedCity.label || selectedCity.value\r\n            : \"\";\r\n          const query = [cityText, stateText].filter(Boolean).join(\", \");\r\n          if (query) {\r\n            const geocoder = new window.google.maps.Geocoder();\r\n            await new Promise((resolve) => {\r\n              geocoder.geocode({ address: query }, (results, status) => {\r\n                if (\r\n                  status === \"OK\" &&\r\n                  results &&\r\n                  results[0] &&\r\n                  results[0].geometry &&\r\n                  results[0].geometry.location\r\n                ) {\r\n                  latitude = results[0].geometry.location.lat();\r\n                  longitude = results[0].geometry.location.lng();\r\n                  setGeoCoords({ latitude, longitude });\r\n                }\r\n                resolve();\r\n              });\r\n            });\r\n          }\r\n        }\r\n        if (latitude && longitude) {\r\n          await loadNearestRegionsByCoords(latitude, longitude, 5);\r\n        }\r\n      } catch {\r\n        // silent\r\n      }\r\n    };\r\n    enterStepFetch();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentStep, nearestMode]);\r\n\r\n  // Auto-load nearest regions from broker's stored coordinates when profile loads\r\n  useEffect(() => {\r\n    const loadNearestFromBrokerCoords = async () => {\r\n      if (!nearestMode) return;\r\n      \r\n      // Check if we already have coordinates\r\n      if (geoCoords.latitude && geoCoords.longitude) return;\r\n      \r\n      // Use the already loaded broker data instead of making API call\r\n      if (brokerFormData && brokerFormData.location && \r\n          brokerFormData.location.coordinates && \r\n          Array.isArray(brokerFormData.location.coordinates) && \r\n          brokerFormData.location.coordinates.length >= 2) {\r\n        \r\n        const [latitude, longitude] = brokerFormData.location.coordinates;\r\n        \r\n        if (latitude && longitude) {\r\n          // Set coordinates and load nearest regions (latitude, longitude order)\r\n          setGeoCoords({ latitude, longitude });\r\n          await loadNearestRegionsByCoords(latitude, longitude, 5);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Only run if we don't have coordinates yet and nearest mode is enabled\r\n    if (!geoCoords.latitude && !geoCoords.longitude && nearestMode) {\r\n      loadNearestFromBrokerCoords();\r\n    }\r\n  }, [nearestMode, geoCoords.latitude, geoCoords.longitude, brokerFormData]);\r\n\r\n  // Handle office address selection\r\n  const handleOfficeAddressChange = (selectedOption) => {\r\n    setSelectedOfficeAddress(selectedOption);\r\n    if (selectedOption) {\r\n      setBrokerFormData((prev) => ({\r\n        ...prev,\r\n        officeAddress: selectedOption.description,\r\n      }));\r\n      // toast.success('Address selected successfully');\r\n      // Try to resolve coordinates from Google Place details if available\r\n      try {\r\n        if (window.google && window.google.maps && selectedOption.placeId) {\r\n          const service = new window.google.maps.places.PlacesService(\r\n            document.createElement(\"div\")\r\n          );\r\n          service.getDetails(\r\n            { placeId: selectedOption.placeId },\r\n            (place, status) => {\r\n              if (\r\n                status === window.google.maps.places.PlacesServiceStatus.OK &&\r\n                place &&\r\n                place.geometry &&\r\n                place.geometry.location\r\n              ) {\r\n                const latitude = place.geometry.location.lat();\r\n                const longitude = place.geometry.location.lng();\r\n                setGeoCoords({ latitude, longitude });\r\n              }\r\n            }\r\n          );\r\n        }\r\n      } catch {}\r\n    }\r\n  };\r\n\r\n  // Fetch nearest regions using stored coordinates\r\n  const loadNearestRegionsByCoords = async (latitude, longitude, limit = 5) => {\r\n    if (!latitude || !longitude) return;\r\n    try {\r\n      setNearestRegionsLoading(true);\r\n      setNearestRegionsError(\"\");\r\n      const baseUrl = process.env.NEXT_PUBLIC_API_URL || \"\";\r\n      const url = `${baseUrl}/regions/nearest?latitude=${encodeURIComponent(\r\n        latitude\r\n      )}&longitude=${encodeURIComponent(longitude)}&limit=${encodeURIComponent(\r\n        limit\r\n      )}`;\r\n      const res = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...(user?.token ? { Authorization: `Bearer ${user.token}` } : {}),\r\n        },\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed\");\r\n      const data = await res.json();\r\n      let list = [];\r\n      if (data?.success && Array.isArray(data?.data?.regions))\r\n        list = data.data.regions;\r\n      else if (Array.isArray(data)) list = data;\r\n      else if (Array.isArray(data?.data)) list = data.data;\r\n      else if (Array.isArray(data?.regions)) list = data.regions;\r\n      else if (data?._id && data?.name) list = [data];\r\n      setNearestRegions(Array.isArray(list) ? list : []);\r\n    } catch {\r\n      setNearestRegionsError(\"Error loading nearest regions\");\r\n      setNearestRegions([]);\r\n    } finally {\r\n      setNearestRegionsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle current location\r\n  const handleUseCurrentLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      toast.error(\"Geolocation is not supported by this browser\");\r\n      return;\r\n    }\r\n\r\n    toast.loading(\"Getting your current location...\");\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        // Use Google Geocoding API to get address from coordinates\r\n        if (window.google && window.google.maps) {\r\n          const geocoder = new window.google.maps.Geocoder();\r\n          const latlng = new window.google.maps.LatLng(latitude, longitude);\r\n\r\n          geocoder.geocode({ location: latlng }, (results, status) => {\r\n            if (status === \"OK\" && results[0]) {\r\n              const address = results[0].formatted_address;\r\n              const addressOption = {\r\n                value: address,\r\n                label: address,\r\n                description: address,\r\n              };\r\n\r\n              // Add to options if not already there\r\n              setOfficeAddressOptions((prev) => {\r\n                const exists = prev.some((option) => option.value === address);\r\n                if (!exists) {\r\n                  return [...prev, addressOption];\r\n                }\r\n                return prev;\r\n              });\r\n\r\n              // Set the selected address\r\n              setSelectedOfficeAddress(addressOption);\r\n              setBrokerFormData((prev) => ({\r\n                ...prev,\r\n                officeAddress: address,\r\n              }));\r\n\r\n              // Set coordinates to trigger nearest regions API call\r\n              setGeoCoords({ latitude, longitude });\r\n\r\n              toast.dismiss();\r\n              // toast.success('Current location set successfully!');\r\n            } else {\r\n              toast.dismiss();\r\n              toast.error(\"Could not get address from location\");\r\n            }\r\n          });\r\n        } else {\r\n          // Even if Google Maps API is not loaded, we can still set coordinates\r\n          // and let the user manually enter address\r\n          setGeoCoords({ latitude, longitude });\r\n          toast.dismiss();\r\n          toast.error(\"Google Maps API not loaded, but coordinates are set\");\r\n        }\r\n      },\r\n      (error) => {\r\n        toast.dismiss();\r\n        let errorMessage = \"Error getting location: \";\r\n        switch (error.code) {\r\n          case error.PERMISSION_DENIED:\r\n            errorMessage += \"Permission denied\";\r\n            break;\r\n          case error.POSITION_UNAVAILABLE:\r\n            errorMessage += \"Position unavailable\";\r\n            break;\r\n          case error.TIMEOUT:\r\n            errorMessage += \"Request timeout\";\r\n            break;\r\n          default:\r\n            errorMessage += \"Unknown error\";\r\n            break;\r\n        }\r\n        toast.error(errorMessage);\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000,\r\n      }\r\n    );\r\n  };\r\n\r\n  // Pre-fill phone number from user data\r\n  useEffect(() => {\r\n    if (user?.phone) {\r\n      if (user.role === \"customer\") {\r\n        setCustomerFormData((prev) => ({ ...prev, phone: user.phone }));\r\n      } else {\r\n        setBrokerFormData((prev) => ({ ...prev, phone: user.phone }));\r\n      }\r\n    }\r\n  }, [user]);\r\n\r\n  // Load profile data based on user role\r\n  useEffect(() => {\r\n    const loadProfileData = async () => {\r\n      try {\r\n        if (!user?.token) {\r\n          setProfileLoading(false);\r\n          return;\r\n        }\r\n\r\n        const currentUserRole = user.role || \"broker\";\r\n\r\n        let response;\r\n        if (currentUserRole === \"customer\") {\r\n          // Get customer ID from user context\r\n          const customerId = user.userId;\r\n\r\n          if (customerId) {\r\n            response = await fetch(\r\n              `${process.env.NEXT_PUBLIC_API_URL}/customers/${customerId}`,\r\n              {\r\n                headers: {\r\n                  Authorization: `Bearer ${user.token}`,\r\n                  Accept: \"application/json\",\r\n                },\r\n              }\r\n            );\r\n          } else {\r\n            toast.error(\"Customer ID not found in token\");\r\n            setProfileLoading(false);\r\n            return;\r\n          }\r\n        } else {\r\n          // For broker, get broker ID from user context\r\n          const brokerId = user.userId;\r\n\r\n          if (brokerId) {\r\n            // Call get broker by ID API\r\n            const brokerUrl = `${process.env.NEXT_PUBLIC_API_URL}/brokers/${brokerId}`;\r\n\r\n            response = await fetch(brokerUrl, {\r\n              headers: {\r\n                Authorization: `Bearer ${user.token}`,\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\",\r\n              },\r\n            });\r\n          } else {\r\n            toast.error(\"Broker ID not found in token\");\r\n            setProfileLoading(false);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (response.ok) {\r\n          let data = await response.json();\r\n\r\n          if (currentUserRole === \"customer\") {\r\n            // Update customer form data from customer by ID API response\r\n            const customerData = data.data?.customer || data.data || data;\r\n            // Extract and normalize customer image URL\r\n            const customerImage = toPublicUrl(\r\n              customerData.images?.customerImage ||\r\n              customerData.files?.customerImage ||\r\n              customerData.customerImage ||\r\n              null\r\n            );\r\n\r\n            // Extract preferences from the actual API response structure\r\n            const preferences = customerData.preferences || {};\r\n            const budgetMin = preferences.budgetMin || \"\";\r\n            const budgetMax = preferences.budgetMax || \"\";\r\n            const propertyType = preferences.propertyType || [];\r\n            const regions = preferences.region || [];\r\n\r\n            // Extract customer gender field\r\n            const gender = customerData.gender || customerFormData.gender || \"\";\r\n\r\n            setCustomerFormData((prev) => ({\r\n              ...prev,\r\n              name: customerData.name || prev.name,\r\n              email: customerData.email || prev.email,\r\n              phone: customerData.phone || prev.phone,\r\n              budgetMin: budgetMin,\r\n              budgetMax: budgetMax,\r\n              propertyType: propertyType,\r\n              regions: regions,\r\n              inquiryCount: customerData.inquiryCount || prev.inquiryCount,\r\n              customerImage: customerImage,\r\n              gender: gender,\r\n            }));\r\n          } else {\r\n            // Broker data binding - improved handling\r\n            // Handle different API response structures for broker data\r\n            let brokerData;\r\n            if (data.data) {\r\n              // If response has nested data structure\r\n              brokerData = data.data.broker || data.data;\r\n            } else {\r\n              // If response is direct broker data\r\n              brokerData = data;\r\n            }\r\n\r\n            // Extract broker information with better error handling\r\n            const extractBrokerField = (fieldName, fallbackValue = \"\") => {\r\n              const possiblePaths = [\r\n                brokerData[fieldName],\r\n                brokerData.user?.[fieldName],\r\n                brokerData.brokerDetails?.[fieldName],\r\n                brokerData.brokerDetail?.[fieldName],\r\n                brokerData.personalInfo?.[fieldName],\r\n                brokerData.businessInfo?.[fieldName],\r\n              ];\r\n\r\n              const value = possiblePaths.find(\r\n                (val) => val !== undefined && val !== null && val !== \"\"\r\n              );\r\n              return value || fallbackValue;\r\n            };\r\n\r\n            // Handle regions based on actual API response structure\r\n            let regions = [];\r\n            if (brokerData.region && Array.isArray(brokerData.region)) {\r\n              regions = brokerData.region;\r\n            } else if (\r\n              brokerData.regions &&\r\n              Array.isArray(brokerData.regions)\r\n            ) {\r\n              regions = brokerData.regions;\r\n            }\r\n\r\n            // Extract broker fields based on actual API response structure\r\n            const name =\r\n              brokerData.name || brokerData.userId?.name || brokerFormData.name;\r\n            const email =\r\n              brokerData.email ||\r\n              brokerData.userId?.email ||\r\n              brokerFormData.email;\r\n            const phone =\r\n              brokerData.phone ||\r\n              brokerData.userId?.phone ||\r\n              brokerFormData.phone;\r\n            const firmName = brokerData.firmName || brokerFormData.firmName;\r\n\r\n            // Extract additional fields from API response\r\n            const address = brokerData.address || brokerFormData.address || \"\";\r\n            const gender = brokerData.gender || brokerFormData.gender || \"\";\r\n            const city = brokerData.city || brokerFormData.city || \"\";\r\n            const licenseNumber =\r\n              brokerData.licenseNumber || brokerFormData.licenseNumber || \"\";\r\n           \r\n            const experience = (\r\n              typeof brokerData.experience === \"object\" && brokerData.experience !== null\r\n                ? (brokerData.experience.years ?? \"\")\r\n                : (brokerData.experience ?? \"\")\r\n            ) || brokerFormData.experience || \"\";\r\n           \r\n            const about =\r\n              brokerData.content || brokerData.about || brokerFormData.about || \"\";\r\n            const officeAddress =\r\n              brokerData.address ||\r\n              brokerData.officeAddress ||\r\n              brokerFormData.officeAddress ||\r\n              \"\";\r\n\r\n            const specializations =\r\n              brokerData.specializations ||\r\n              brokerFormData.specializations ||\r\n              [];\r\n            const state = brokerData.state || brokerFormData.state || \"\";\r\n\r\n            // Extract social media fields\r\n            const socialMedia = brokerData.socialMedia || {};\r\n            const linkedin =\r\n              socialMedia.linkedin || brokerFormData.linkedin || \"\";\r\n            const twitter = socialMedia.twitter || brokerFormData.twitter || \"\";\r\n            const instagram =\r\n              socialMedia.instagram || brokerFormData.instagram || \"\";\r\n            const facebook =\r\n              socialMedia.facebook || brokerFormData.facebook || \"\";\r\n            const whatsapp =\r\n              brokerData.whatsappNumber || brokerFormData.whatsapp || \"\";\r\n            const website = brokerData.website || brokerFormData.website || \"\";\r\n\r\n            // Handle KYC documents from the actual API response structure\r\n            const kycDocs = brokerData.kycDocs || {};\r\n            const aadharFile = kycDocs.aadhar || null;\r\n            const panFile = kycDocs.pan || null;\r\n            const gstFile = kycDocs.gst || null;\r\n            const brokerLicenseFile = kycDocs.brokerLicense || null;\r\n            const companyIdFile = kycDocs.companyId || null;\r\n            const brokerImage = toPublicUrl(\r\n              brokerData.brokerImage ||\r\n              brokerData.userId?.profileImage ||\r\n              brokerData.personalInfo?.profileImage ||\r\n              null\r\n            );\r\n\r\n            // Extract location coordinates\r\n            const location = brokerData.location || null;\r\n\r\n            // Update broker form data with extracted values\r\n            setBrokerFormData((prev) => ({\r\n              ...prev,\r\n              name: name,\r\n              email: email,\r\n              phone: phone,\r\n              firmName: firmName,\r\n              address: address,\r\n              gender: gender,\r\n              city: city,\r\n              licenseNumber: licenseNumber,\r\n              experience: experience,\r\n              about: about,\r\n              officeAddress: officeAddress,\r\n              specializations: specializations,\r\n              state: state,\r\n              linkedin: linkedin,\r\n              twitter: twitter,\r\n              instagram: instagram,\r\n              facebook: facebook,\r\n              whatsapp: whatsapp,\r\n              website: website,\r\n              regions: regions,\r\n              aadharFile: aadharFile,\r\n              panFile: panFile,\r\n              gstFile: gstFile,\r\n              brokerLicenseFile: brokerLicenseFile,\r\n              companyIdFile: companyIdFile,\r\n              brokerImage: brokerImage,\r\n              location: location,\r\n            }));\r\n\r\n            // Set office address for the Select component\r\n            if (officeAddress) {\r\n              const addressOption = {\r\n                value: officeAddress,\r\n                label: officeAddress,\r\n              };\r\n\r\n              // Add the address to options if it's not already there\r\n              setOfficeAddressOptions((prev) => {\r\n                const exists = prev.some(\r\n                  (option) => option.value === officeAddress\r\n                );\r\n                if (!exists) {\r\n                  return [...prev, addressOption];\r\n                }\r\n                return prev;\r\n              });\r\n\r\n              setSelectedOfficeAddress(addressOption);\r\n            } else {\r\n              setSelectedOfficeAddress(null);\r\n            }\r\n\r\n            // Set state and city for the Select components\r\n            if (state) {\r\n              const stateOption = statesList.find(\r\n                (s) => s.value === state.toLowerCase().replace(/\\s+/g, \"-\")\r\n              );\r\n              if (stateOption) {\r\n                setSelectedState(stateOption);\r\n                // Load cities for the selected state\r\n                loadHardcodedCities(stateOption.value);\r\n              }\r\n            }\r\n\r\n            if (city) {\r\n              // Wait a bit for cities to load, then set the city\r\n              setTimeout(() => {\r\n                const cityOption = citiesList.find(\r\n                  (c) => c.value === city.toLowerCase().replace(/\\s+/g, \"-\")\r\n                );\r\n                if (cityOption) {\r\n                  setSelectedCity(cityOption);\r\n                  // Load regions for this city\r\n                  loadRegions(cityOption.value);\r\n                } else {\r\n                  // If city not found in current list, create it\r\n                  const newCityOption = {\r\n                    value: city.toLowerCase().replace(/\\s+/g, \"-\"),\r\n                    label: city,\r\n                  };\r\n                  setSelectedCity(newCityOption);\r\n                  // Load regions for this city\r\n                  loadRegions(newCityOption.value);\r\n                }\r\n              }, 100);\r\n            }\r\n          }\r\n\r\n          // Profile data loaded successfully\r\n        } else {\r\n          const errorData = await response\r\n            .json()\r\n            .catch(() => ({ message: \"Unknown error\" }));\r\n\r\n          if (response.status === 401) {\r\n            toast.error(\"Authentication failed. Please login again.\");\r\n          } else if (response.status === 404) {\r\n            toast.error(\r\n              `${\r\n                currentUserRole === \"customer\" ? \"Customer\" : \"Broker\"\r\n              } profile not found.`\r\n            );\r\n          } else if (response.status >= 500) {\r\n            toast.error(\"Server error. Please try again later.\");\r\n          } else {\r\n            toast.error(\r\n              errorData.message ||\r\n                `Failed to load ${currentUserRole} profile data`\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        if (error.name === \"TypeError\" && error.message.includes(\"fetch\")) {\r\n          toast.error(\r\n            \"Network error. Please check your connection and try again.\"\r\n          );\r\n        } else {\r\n          toast.error(\r\n            `Error loading ${currentUserRole} profile data: ${error.message}`\r\n          );\r\n        }\r\n      } finally {\r\n        setProfileLoading(false);\r\n      }\r\n    };\r\n\r\n    if (userRole && user?.token) {\r\n      loadProfileData();\r\n    }\r\n  }, [userRole, user]);\r\n\r\n  // Load regions only when a city is selected (not on component mount)\r\n  // Regions will be loaded when user selects a city in handleCityChange\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Clear email error when user changes email\r\n    if (name === \"email\") {\r\n      setEmailError(\"\");\r\n    }\r\n\r\n    if (userRole === \"customer\") {\r\n      setCustomerFormData((prev) => ({ ...prev, [name]: value }));\r\n    } else {\r\n      setBrokerFormData((prev) => ({ ...prev, [name]: value }));\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const { name, files } = e.target;\r\n    if (userRole === \"customer\") {\r\n      setCustomerFormData((prev) => ({ ...prev, [name]: files[0] || null }));\r\n    } else {\r\n      setBrokerFormData((prev) => ({ ...prev, [name]: files[0] || null }));\r\n    }\r\n  };\r\n\r\n  // Gate to enable documents after preferred region selection\r\n  const [canUploadDocs, setCanUploadDocs] = useState(false);\r\n  useEffect(() => {\r\n    const hasRegion = Array.isArray(brokerFormData?.regions) && brokerFormData.regions.length > 0;\r\n    if (hasRegion) setCanUploadDocs(true);\r\n  }, [brokerFormData?.regions]);\r\n\r\n  const handleRegionChange = (selectedOption) => {\r\n    const selectedValue = selectedOption ? selectedOption.value : null;\r\n    // Only update regions for brokers\r\n    if (userRole === \"broker\") {\r\n      setBrokerFormData((prev) => ({\r\n        ...prev,\r\n        regions: selectedValue ? [selectedValue] : [],\r\n      }));\r\n      // Enable document uploads when a preferred region is selected\r\n      setCanUploadDocs(!!selectedValue);\r\n    }\r\n  };\r\n\r\n  const handleStateChange = (selectedOption) => {\r\n    setSelectedState(selectedOption);\r\n    setSelectedCity(null);\r\n    setBrokerFormData((prev) => ({\r\n      ...prev,\r\n      state: selectedOption?.value || \"\",\r\n      city: \"\",\r\n      regions: [],\r\n    }));\r\n\r\n    if (selectedOption) {\r\n      // Load hardcoded cities based on selected state\r\n      loadHardcodedCities(selectedOption.value);\r\n    } else {\r\n      setCitiesList([]);\r\n    }\r\n  };\r\n\r\n  const loadHardcodedCities = (stateValue) => {\r\n    let cities = [];\r\n\r\n    if (stateValue === \"uttar-pradesh\") {\r\n      cities = [\r\n        { value: \"noida\", label: \"Noida\" },\r\n        { value: \"agra\", label: \"Agra\" },\r\n      ];\r\n    }\r\n\r\n    setCitiesList(cities);\r\n  };\r\n\r\n  const handleCityChange = (selectedOption) => {\r\n    setSelectedCity(selectedOption);\r\n    setBrokerFormData((prev) => ({\r\n      ...prev,\r\n      city: selectedOption?.value || \"\",\r\n      regions: [],\r\n    }));\r\n\r\n    // Load regions based on selected city\r\n    if (selectedOption) {\r\n      loadRegions(selectedOption.value);\r\n    } else {\r\n      setRegionsList([]);\r\n    }\r\n  };\r\n\r\n  // Removed loadCities function - using hardcoded cities instead\r\n\r\n  const loadRegions = async (cityId = null) => {\r\n    try {\r\n      setRegionsLoading(true);\r\n      setRegionsError(\"\");\r\n\r\n      // Build API URL with city filter if city is selected\r\n      let apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/regions`;\r\n      if (cityId) {\r\n        apiUrl += `?city=${cityId}`;\r\n      }\r\n\r\n      const response = await fetch(apiUrl, {\r\n        headers: {\r\n          Authorization: `Bearer ${user?.token}`,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        // Handle the API response structure: { success: true, message: \"...\", data: { regions: [...] } }\r\n        let regions = [];\r\n        if (data.success && data.data && Array.isArray(data.data.regions)) {\r\n          regions = data.data.regions;\r\n        } else if (Array.isArray(data)) {\r\n          regions = data;\r\n        } else if (data.data && Array.isArray(data.data)) {\r\n          regions = data.data;\r\n        } else if (data.regions && Array.isArray(data.regions)) {\r\n          regions = data.regions;\r\n        } else if (data._id && data.name) {\r\n          // Handle single object response\r\n          regions = [data];\r\n        }\r\n        setRegionsList(regions);\r\n      } else {\r\n        setRegionsError(\"Failed to load regions\");\r\n        setRegionsList([]);\r\n      }\r\n    } catch (error) {\r\n      setRegionsError(\"Error loading regions\");\r\n      setRegionsList([]);\r\n    } finally {\r\n      setRegionsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePropertyTypeChange = (selectedOptions) => {\r\n    const selectedValues = selectedOptions\r\n      ? selectedOptions.map((option) => option.value)\r\n      : [];\r\n    setCustomerFormData((prev) => ({ ...prev, propertyType: selectedValues }));\r\n  };\r\n\r\n  const handleSpecializationChange = (selectedOptions) => {\r\n    const selectedValues = selectedOptions\r\n      ? selectedOptions.map((option) => option.value)\r\n      : [];\r\n    setBrokerFormData((prev) => ({ ...prev, specializations: selectedValues }));\r\n  };\r\n\r\n  // Check if email exists in database\r\n  const checkEmailExists = async (email) => {\r\n    try {\r\n      const userId = user?.userId || user?._id || \"\";\r\n      const response = await fetch(\r\n        `${\r\n          process.env.NEXT_PUBLIC_API_URL\r\n        }/auth/check-email?email=${encodeURIComponent(\r\n          email\r\n        )}&userId=${encodeURIComponent(userId)}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      // API response structure: { success: true, data: { exists: true/false, message: \"...\" } }\r\n      if (data.success && data.data && data.data.exists === true) {\r\n        return {\r\n          exists: true,\r\n          message: data.data.message || \"Email is already in use\",\r\n        };\r\n      }\r\n      return { exists: false, message: \"\" };\r\n    } catch (error) {\r\n      return {\r\n        exists: false,\r\n        message: \"Error checking email. Please try again.\",\r\n      };\r\n    }\r\n  };\r\n\r\n  // Step navigation functions\r\n  const nextStep = async () => {\r\n    // If moving from step 1 (Personal Details) to step 2, check email\r\n    if (currentStep === 1) {\r\n      const currentFormData =\r\n        userRole === \"customer\" ? customerFormData : brokerFormData;\r\n\r\n      if (currentFormData.email) {\r\n        setIsCheckingEmail(true);\r\n        setEmailError(\"\");\r\n\r\n        try {\r\n          const emailCheckResult = await checkEmailExists(\r\n            currentFormData.email\r\n          );\r\n\r\n          if (emailCheckResult.exists) {\r\n            setEmailError(emailCheckResult.message);\r\n            setIsCheckingEmail(false);\r\n            return; // Don't proceed to next step\r\n          }\r\n        } catch (error) {\r\n          setEmailError(\"Error checking email. Please try again.\");\r\n          setIsCheckingEmail(false);\r\n          return;\r\n        }\r\n\r\n        setIsCheckingEmail(false);\r\n      }\r\n    }\r\n\r\n    if (currentStep < totalSteps) {\r\n      // Ensure uploads are enabled when moving to Documents if a region is selected\r\n      if (\r\n        userRole === \"broker\" &&\r\n        currentStep === 3 &&\r\n        Array.isArray(brokerFormData?.regions) &&\r\n        brokerFormData.regions.length > 0\r\n      ) {\r\n        setCanUploadDocs(true);\r\n      }\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const goToStep = (step) => {\r\n    // Allow moving back freely\r\n    if (step <= currentStep) {\r\n      setCurrentStep(step);\r\n      return;\r\n    }\r\n    // Prevent moving forward if current step is invalid\r\n    if (validateStep(currentStep)) {\r\n      setCurrentStep(step);\r\n    } else {\r\n      toast.error(\"Please complete the required fields before continuing.\");\r\n    }\r\n  };\r\n\r\n  // Step validation\r\n  const validateStep = (step) => {\r\n    const currentFormData =\r\n      userRole === \"customer\" ? customerFormData : brokerFormData;\r\n\r\n    switch (step) {\r\n      case 1: // Personal Details\r\n        return (\r\n          currentFormData.name &&\r\n          currentFormData.email &&\r\n          currentFormData.phone &&\r\n          currentFormData.gender &&\r\n          // Require firm name for brokers\r\n          (userRole !== \"broker\" || Boolean(currentFormData.firmName)) &&\r\n          !emailError\r\n        );\r\n      case 2: // Professional/Preferences\r\n        if (userRole === \"broker\") {\r\n          // Require license number and address for brokers\r\n          return (\r\n            Boolean(currentFormData.licenseNumber) &&\r\n            Boolean(currentFormData.officeAddress)\r\n          );\r\n        } else {\r\n          // For customers, validate budget if both fields are filled\r\n          if (currentFormData.budgetMin && currentFormData.budgetMax) {\r\n            const min = parseFloat(currentFormData.budgetMin);\r\n            const max = parseFloat(currentFormData.budgetMax);\r\n            return min <= max;\r\n          }\r\n          return true; // Customer preferences are optional\r\n        }\r\n      case 3: // Regions (only for brokers)\r\n        if (userRole === \"broker\") {\r\n          const hasSelectedRegion =\r\n            Array.isArray(currentFormData.regions) &&\r\n            currentFormData.regions.length > 0;\r\n          // In nearest mode, only a region selection is required\r\n          if (nearestMode) {\r\n            return hasSelectedRegion;\r\n          }\r\n          // In manual mode, require state + city + region\r\n          return (\r\n            Boolean(currentFormData.state) &&\r\n            Boolean(currentFormData.city) &&\r\n            hasSelectedRegion\r\n          );\r\n        }\r\n        return true; // Skip for customers\r\n      case 4: // Documents (only for brokers) - OPTIONAL\r\n        if (userRole === \"broker\") {\r\n          return true; // Documents are now optional\r\n        }\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  // Get step title\r\n  const getStepTitle = (step) => {\r\n    switch (step) {\r\n      case 1:\r\n        return \"Personal Info\";\r\n      case 2:\r\n        return userRole === \"customer\" ? \"Preferences\" : \"Professional\";\r\n      case 3:\r\n        return userRole === \"broker\" ? \"Regions\" : \"Documents\";\r\n      case 4:\r\n        return \"Documents\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  // Function to manually refresh broker data\r\n  const refreshBrokerData = async () => {\r\n    if (userRole !== \"broker\") return;\r\n\r\n    setProfileLoading(true);\r\n    try {\r\n      const token =\r\n        typeof window !== \"undefined\" ? localStorage.getItem(\"token\") : null;\r\n      if (!token) {\r\n        toast.error(\"No authentication token found\");\r\n        return;\r\n      }\r\n\r\n      const tokenPayload = JSON.parse(atob(token.split(\".\")[1]));\r\n      const brokerId =\r\n        tokenPayload.brokerId ||\r\n        tokenPayload.brokerDetailId ||\r\n        tokenPayload.brokerDetailsId ||\r\n        tokenPayload.brokerDetails?.id ||\r\n        tokenPayload.brokerDetails?._id ||\r\n        tokenPayload.id;\r\n\r\n      if (!brokerId) {\r\n        toast.error(\"Broker ID not found in token\");\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(\r\n        `${process.env.NEXT_PUBLIC_API_URL}/brokers/${brokerId}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n\r\n        // Process and bind the refreshed data\r\n        let brokerData = data.data?.broker || data.data || data;\r\n\r\n        const extractBrokerField = (fieldName, fallbackValue = \"\") => {\r\n          const possiblePaths = [\r\n            brokerData[fieldName],\r\n            brokerData.user?.[fieldName],\r\n            brokerData.brokerDetails?.[fieldName],\r\n            brokerData.brokerDetail?.[fieldName],\r\n            brokerData.personalInfo?.[fieldName],\r\n            brokerData.businessInfo?.[fieldName],\r\n          ];\r\n\r\n          const value = possiblePaths.find(\r\n            (val) => val !== undefined && val !== null && val !== \"\"\r\n          );\r\n          return value || fallbackValue;\r\n        };\r\n\r\n        // Extract regions based on actual API response structure\r\n        let regions = [];\r\n        if (brokerData.region && Array.isArray(brokerData.region)) {\r\n          regions = brokerData.region;\r\n        } else if (brokerData.regions && Array.isArray(brokerData.regions)) {\r\n          regions = brokerData.regions;\r\n        }\r\n\r\n        // Extract other fields based on actual API response structure\r\n        const name =\r\n          brokerData.name || brokerData.userId?.name || brokerFormData.name;\r\n        const email =\r\n          brokerData.email || brokerData.userId?.email || brokerFormData.email;\r\n        const phone =\r\n          brokerData.phone || brokerData.userId?.phone || brokerFormData.phone;\r\n        const firmName = brokerData.firmName || brokerFormData.firmName;\r\n\r\n        // Extract additional fields from API response\r\n        const address = brokerData.address || brokerFormData.address || \"\";\r\n        const gender = brokerData.gender || brokerFormData.gender || \"\";\r\n        const city = brokerData.city || brokerFormData.city || \"\";\r\n        const licenseNumber =\r\n          brokerData.licenseNumber || brokerFormData.licenseNumber || \"\";\r\n        \r\n        const experience = (\r\n          typeof brokerData.experience === \"object\" && brokerData.experience !== null\r\n            ? (brokerData.experience.years ?? \"\")\r\n            : (brokerData.experience ?? \"\")\r\n        ) || brokerFormData.experience || \"\";\r\n        \r\n        const about = brokerData.content || brokerData.about || brokerFormData.about || \"\";\r\n        const officeAddress =\r\n          brokerData.address ||\r\n          brokerData.officeAddress ||\r\n          brokerFormData.officeAddress ||\r\n          \"\";\r\n        const specializations =\r\n          brokerData.specializations || brokerFormData.specializations || [];\r\n        const state = brokerData.state || brokerFormData.state || \"\";\r\n\r\n        // Extract social media fields\r\n        const socialMedia = brokerData.socialMedia || {};\r\n        const linkedin = socialMedia.linkedin || brokerFormData.linkedin || \"\";\r\n        const twitter = socialMedia.twitter || brokerFormData.twitter || \"\";\r\n        const instagram =\r\n          socialMedia.instagram || brokerFormData.instagram || \"\";\r\n        const facebook = socialMedia.facebook || brokerFormData.facebook || \"\";\r\n        const whatsapp =\r\n          brokerData.whatsappNumber || brokerFormData.whatsapp || \"\";\r\n        const website = brokerData.website || brokerFormData.website || \"\";\r\n\r\n        // Handle KYC documents from the actual API response structure\r\n        const kycDocs = brokerData.kycDocs || {};\r\n        const aadharFile = kycDocs.aadhar || null;\r\n        const panFile = kycDocs.pan || null;\r\n        const gstFile = kycDocs.gst || null;\r\n        const brokerImage = toPublicUrl(\r\n          brokerData.brokerImage ||\r\n          brokerData.userId?.profileImage ||\r\n          brokerData.personalInfo?.profileImage ||\r\n          null\r\n        );\r\n\r\n        // Update form data\r\n        setBrokerFormData((prev) => ({\r\n          ...prev,\r\n          name: name,\r\n          email: email,\r\n          phone: phone,\r\n          firmName: firmName,\r\n          address: address,\r\n          gender: gender,\r\n          city: city,\r\n          licenseNumber: licenseNumber,\r\n          experience: experience,\r\n          about: about,\r\n          officeAddress: officeAddress,\r\n          specializations: specializations,\r\n          state: state,\r\n          linkedin: linkedin,\r\n          twitter: twitter,\r\n          instagram: instagram,\r\n          facebook: facebook,\r\n          whatsapp: whatsapp,\r\n          website: website,\r\n          regions: regions,\r\n          aadharFile: aadharFile,\r\n          panFile: panFile,\r\n          gstFile: gstFile,\r\n          brokerLicenseFile: brokerLicenseFile,\r\n          companyIdFile: companyIdFile,\r\n          brokerImage: brokerImage,\r\n        }));\r\n\r\n        // Set office address for the Select component\r\n        if (officeAddress) {\r\n          const addressOption = {\r\n            value: officeAddress,\r\n            label: officeAddress,\r\n          };\r\n\r\n          // Add the address to options if it's not already there\r\n          setOfficeAddressOptions((prev) => {\r\n            const exists = prev.some(\r\n              (option) => option.value === officeAddress\r\n            );\r\n            if (!exists) {\r\n              return [...prev, addressOption];\r\n            }\r\n            return prev;\r\n          });\r\n\r\n          setSelectedOfficeAddress(addressOption);\r\n        } else {\r\n          setSelectedOfficeAddress(null);\r\n        }\r\n\r\n        // Set state and city for the Select components\r\n        if (state) {\r\n          const stateOption = statesList.find(\r\n            (s) => s.value === state.toLowerCase().replace(/\\s+/g, \"-\")\r\n          );\r\n          if (stateOption) {\r\n            setSelectedState(stateOption);\r\n            // Load cities for the selected state\r\n            loadHardcodedCities(stateOption.value);\r\n          }\r\n        }\r\n\r\n        if (city) {\r\n          // Wait a bit for cities to load, then set the city\r\n          setTimeout(() => {\r\n            const cityOption = citiesList.find(\r\n              (c) => c.value === city.toLowerCase().replace(/\\s+/g, \"-\")\r\n            );\r\n            if (cityOption) {\r\n              setSelectedCity(cityOption);\r\n            } else {\r\n              // If city not found in current list, create it\r\n              const newCityOption = {\r\n                value: city.toLowerCase().replace(/\\s+/g, \"-\"),\r\n                label: city,\r\n              };\r\n              setSelectedCity(newCityOption);\r\n            }\r\n          }, 100);\r\n        }\r\n\r\n        toast.success(\"Broker data refreshed successfully!\");\r\n      } else {\r\n        toast.error(\"Failed to refresh broker data\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Error refreshing broker data\");\r\n    } finally {\r\n      setProfileLoading(false);\r\n    }\r\n  };\r\n\r\n  // Render dedicated view-mode UI inside this page\r\n  if (isViewMode) {\r\n    return (\r\n      <ProtectedRoute>\r\n        <link rel=\"stylesheet\" href=\"/google-places.css\" />\r\n        <Toaster position=\"top-right\" />\r\n        <HeaderFile\r\n          data={{\r\n            title: userRole === \"customer\" ? \"Customer Profile\" : \"Broker Profile\",\r\n            breadcrumb: [\r\n              { label: \"Home\", href: \"/\" },\r\n              { label: \"Profile\", href: \"/profile\" },\r\n            ],\r\n          }}\r\n        />\r\n        <div className=\"min-h-screen bg-white py-12\">\r\n          <ViewModeProfile />\r\n        </div>\r\n      </ProtectedRoute>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ProtectedRoute>\r\n      {/* Load Google Places CSS */}\r\n      <link rel=\"stylesheet\" href=\"/google-places.css\" />\r\n      <Toaster\r\n        position=\"top-right\"\r\n        toastOptions={{\r\n          duration: 4000,\r\n          style: {\r\n            background: \"#363636\",\r\n            color: \"#fff\",\r\n          },\r\n          success: {\r\n            duration: 3000,\r\n            iconTheme: {\r\n              primary: \"#4ade80\",\r\n              secondary: \"#fff\",\r\n            },\r\n          },\r\n          error: {\r\n            duration: 4000,\r\n            iconTheme: {\r\n              primary: \"#ef4444\",\r\n              secondary: \"#fff\",\r\n            },\r\n          },\r\n        }}\r\n      />\r\n       {/* Shared hero header */}\r\n          <HeaderFile\r\n            data={{\r\n              title: userRole === \"customer\" ? \"Customer Profile\" : \"Broker Profile\",\r\n              breadcrumb: [\r\n                { label: \"Home\", href: \"/\" },\r\n                { label: \"Profile\", href: \"/profile\" },\r\n              ],\r\n            }}\r\n          />\r\n      <div className=\"min-h-screen bg-white py-12\">\r\n        <div className=\"w-full\">\r\n         \r\n          {/* Header Section */}\r\n          <div className=\"text-left mb-12 \">\r\n              <div className=\"flex justify-between items-start mb-4\">\r\n              <div className=\"flex-1\">\r\n                <h1 className=\"text-4xl font-display text-gray-900 mb-2\">\r\n                  {isViewMode\r\n                    ? (userRole === \"customer\" ? \"Customer Profile\" : \"Broker Profile\")\r\n                    : mode === 'create'\r\n                    ? (userRole === \"customer\" ? \"Create Customer Profile\" : \"Create Broker Profile\")\r\n                    : (userRole === \"customer\" ? \"Edit Customer Profile\" : \"Edit Broker Profile\")}\r\n                </h1>\r\n                <p className=\"text-sm font-body text-gray-600 text-left\">\r\n                  {isViewMode\r\n                    ? `View your profile information`\r\n                    : mode === 'create'\r\n                    ? `Complete your profile to get started with ${userRole === \"customer\" ? \"finding your dream property\" : \"connecting with potential clients\"}`\r\n                    : `Update your profile information and preferences`}\r\n                </p>\r\n              </div>\r\n              {isViewMode && (\r\n                <div className=\"flex-shrink-0 ml-4\">\r\n                  <button\r\n                    onClick={() => {\r\n                      const url = new URL(window.location.href);\r\n                      url.searchParams.set('mode', 'edit');\r\n                      window.history.pushState({}, '', url.toString());\r\n                      setMode('edit');\r\n                    }}\r\n                    className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 flex items-center gap-2 shadow-md hover:shadow-lg\"\r\n                  >\r\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                    </svg>\r\n                    Edit\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            \r\n          \r\n          </div>\r\n\r\n          {/* Progress moved to right sidebar */}\r\n\r\n          {/* Layout: 9 / 3 columns */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6 items-start\">\r\n           \r\n          {/* Form Card */}\r\n          <div className=\"lg:col-span-9 bg-white rounded-2xl shadow border border-gray-100 overflow-hidden\">\r\n            {/* Step Content */}\r\n            {profileLoading ? (\r\n              <div className=\"flex items-center justify-center py-20\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-6\"></div>\r\n                  <p className=\"text-lg text-gray-600 font-medium\">\r\n                    Loading profile data...\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"p-8\">\r\n                {/* Step 1: Personal Details */}\r\n                {currentStep === 1 && (\r\n                  <div className=\"w-full mx-auto\">\r\n                    {/* Profile Image Section - Top */}\r\n                    <div className=\"flex justify-left mb-8\">\r\n                      <div className=\"relative inline-block\">\r\n                        <div className=\"w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full flex items-center justify-center overflow-hidden shadow-lg\">\r\n                          {(\r\n                            userRole === \"customer\"\r\n                              ? customerFormData.customerImage\r\n                              : brokerFormData.brokerImage\r\n                          ) ? (\r\n                            <img\r\n                              src={\r\n                                typeof (userRole === \"customer\"\r\n                                  ? customerFormData.customerImage\r\n                                  : brokerFormData.brokerImage) === \"string\"\r\n                                  ? userRole === \"customer\"\r\n                                    ? customerFormData.customerImage\r\n                                    : brokerFormData.brokerImage\r\n                                  : URL.createObjectURL(\r\n                                      userRole === \"customer\"\r\n                                        ? customerFormData.customerImage\r\n                                        : brokerFormData.brokerImage\r\n                                    )\r\n                              }\r\n                              alt={`${userRole} Profile`}\r\n                              className=\"w-full h-full object-cover\"\r\n                              onError={(e) => {\r\n                                e.currentTarget.src = \"/images/user-1.webp\";\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <svg\r\n                              className=\"w-8 h-8 text-blue-400\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n                              />\r\n                            </svg>\r\n                          )}\r\n                        </div>\r\n                        <input\r\n                          type=\"file\"\r\n                          name={\r\n                            userRole === \"customer\"\r\n                              ? \"customerImage\"\r\n                              : \"brokerImage\"\r\n                          }\r\n                          onChange={handleFileChange}\r\n                          accept=\".jpg,.jpeg,.png\"\r\n                          className=\"hidden\"\r\n                          id=\"profile-image-upload\"\r\n                        />\r\n                        {!isViewMode && (\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"absolute -bottom-1 -right-1 bg-blue-600 w-8 h-8 rounded-full flex items-center justify-center hover:bg-blue-700 transition-all duration-200 shadow-lg hover:shadow-xl\"\r\n                          onClick={() =>\r\n                            document\r\n                              .getElementById(\"profile-image-upload\")\r\n                              .click()\r\n                          }\r\n                        >\r\n                            <svg\r\n                              className=\"w-4 h-4 text-white\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\r\n                              />\r\n                            </svg>\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Form Fields */}\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                      <div className=\"space-y-4\">\r\n                        <div>\r\n                          <label className=\"block text-xs font-label text-gray-700 mb-2\">\r\n                            Full Name <span className=\"text-red-500\">*</span>\r\n                          </label>\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={\r\n                              userRole === \"customer\"\r\n                                ? customerFormData.name\r\n                                : brokerFormData.name\r\n                            }\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your full name\"\r\n                            disabled={isViewMode}\r\n                            className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 transition-all duration-200 text-sm font-body ${\r\n                              isViewMode ? 'bg-gray-100 border-gray-200 text-gray-600 cursor-not-allowed' : 'bg-gray-50 border-gray-200 focus:ring-blue-100 focus:border-blue-500'\r\n                            }`}\r\n                          />\r\n                        </div>\r\n\r\n                        <div>\r\n                          <label className=\"block text-xs font-label text-gray-700 mb-2\">\r\n                            Email Address{\" \"}\r\n                            <span className=\"text-red-500\">*</span>\r\n                          </label>\r\n                          <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={\r\n                              userRole === \"customer\"\r\n                                ? customerFormData.email\r\n                                : brokerFormData.email\r\n                            }\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your email address\"\r\n                            disabled={isViewMode}\r\n                            className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 transition-all duration-200 text-sm font-body ${\r\n                              isViewMode\r\n                                ? 'bg-gray-100 border-gray-200 text-gray-600 cursor-not-allowed'\r\n                                : emailError\r\n                                  ? 'bg-gray-50 border-red-300 focus:ring-red-100 focus:border-red-500'\r\n                                  : 'bg-gray-50 border-gray-200 focus:ring-blue-100 focus:border-blue-500'\r\n                            }`}\r\n                          />\r\n                          {emailError && (\r\n                            <p className=\"mt-1 text-xs text-red-600 flex items-center gap-1\">\r\n                              <svg\r\n                                className=\"w-3 h-3\"\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 20 20\"\r\n                              >\r\n                                <path\r\n                                  fillRule=\"evenodd\"\r\n                                  d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\"\r\n                                  clipRule=\"evenodd\"\r\n                                />\r\n                              </svg>\r\n                              {emailError}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n\r\n                        <div>\r\n                          <label className=\"block text-xs font-label text-gray-700 mb-2\">\r\n                            Phone Number <span className=\"text-red-500\">*</span>\r\n                          </label>\r\n                          <input\r\n                            type=\"tel\"\r\n                            name=\"phone\"\r\n                            value={\r\n                              userRole === \"customer\"\r\n                                ? customerFormData.phone\r\n                                : brokerFormData.phone\r\n                            }\r\n                            onChange={handleChange}\r\n                            placeholder=\"Enter your phone number\"\r\n                            disabled\r\n                            className=\"w-full px-3 py-2 bg-gray-100 border border-gray-200 rounded-lg text-gray-500 cursor-not-allowed text-sm font-body\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"space-y-4\">\r\n                        <div>\r\n                          <label className=\"block text-xs font-label text-gray-700 mb-2\">\r\n                            Gender <span className=\"text-red-500\">*</span>\r\n                          </label>\r\n                          {/* Icon buttons for gender selection */}\r\n                          {(() => {\r\n                            const selected =\r\n                              (userRole === \"customer\"\r\n                                  ? customerFormData.gender\r\n                                : brokerFormData.gender) || \"\";\r\n                            const isMale = selected === \"male\";\r\n                            const isFemale = selected === \"female\";\r\n                            const setGender = (value) => {\r\n                              if (userRole === \"customer\") {\r\n                                setCustomerFormData((prev) => ({ ...prev, gender: value }));\r\n                              } else {\r\n                                setBrokerFormData((prev) => ({ ...prev, gender: value }));\r\n                              }\r\n                            };\r\n                            const circleBase =\r\n                              \"w-10 h-10 rounded-full flex items-center justify-center transition-all\";\r\n                            const labelBase = \"text-xs mt-1 text-center\";\r\n                            return (\r\n                              <div className=\"flex items-center gap-6\">\r\n                                {/* Male */}\r\n                                <button\r\n                                  type=\"button\"\r\n                                  onClick={() => setGender(\"male\")}\r\n                                  className=\"flex flex-col items-center focus:outline-none\"\r\n                                >\r\n                                  <div\r\n                                    className={`${circleBase} ${\r\n                                      isMale\r\n                                        ? \"bg-blue-600 text-white shadow\"\r\n                                        : \"bg-gray-200 text-gray-500\"\r\n                                    }`}\r\n                                  >\r\n                                    {/* Male icon - outline restroom style */}\r\n                                    <svg viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                      <circle cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                      <path d=\"M9 9h6\" />\r\n                                      <path d=\"M7 22V12a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v10\" />\r\n                                      <path d=\"M10 22v-7M14 22v-7\" />\r\n                                    </svg>\r\n                                  </div>\r\n                                  <span className={`${labelBase} ${isMale ? \"text-blue-600\" : \"text-gray-600\"}`}>\r\n                                    Male\r\n                                  </span>\r\n                                </button>\r\n\r\n                                {/* Female */}\r\n                                <button\r\n                                  type=\"button\"\r\n                                  onClick={() => setGender(\"female\")}\r\n                                  className=\"flex flex-col items-center focus:outline-none\"\r\n                                >\r\n                                  <div\r\n                                    className={`${circleBase} ${\r\n                                      isFemale\r\n                                        ? \"bg-blue-600 text-white shadow\"\r\n                                        : \"bg-gray-200 text-gray-500\"\r\n                                    }`}\r\n                                  >\r\n                                    {/* Female icon - outline restroom style */}\r\n                                    <svg viewBox=\"0 0 24 24\" width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                                      <circle cx=\"12\" cy=\"5\" r=\"2\" />\r\n                                      <path d=\"M9 9h6\" />\r\n                                      <path d=\"M9 9l-3 6h12l-3-6z\" />\r\n                                      <path d=\"M8 22v-6M16 22v-6\" />\r\n                                    </svg>\r\n                                  </div>\r\n                                  <span className={`${labelBase} ${isFemale ? \"text-blue-600\" : \"text-gray-600\"}`}>\r\n                                    Female\r\n                                  </span>\r\n                                </button>\r\n                              </div>\r\n                            );\r\n                          })()}\r\n                        </div>\r\n\r\n                        {userRole === \"broker\" && (\r\n                          <div>\r\n                            <label className=\"block text-xs font-label text-gray-700 mb-2\">\r\n                              Firm Name\r\n                            </label>\r\n                            <input\r\n                              type=\"text\"\r\n                              name=\"firmName\"\r\n                              value={brokerFormData.firmName}\r\n                              onChange={handleChange}\r\n                              placeholder=\"Enter your firm name\"\r\n                              className=\"w-full px-3 py-2 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-500 transition-all duration-200 text-sm font-body\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n\r\n                        {userRole === \"broker\" && (\r\n                          <div>\r\n                            <label className=\"block text-xs font-label text-gray-700 mb-2 flex items-center\">\r\n                              <svg\r\n                                className=\"w-4 h-4 text-green-600 mr-2\"\r\n                                fill=\"currentColor\"\r\n                                viewBox=\"0 0 24 24\"\r\n                              >\r\n                                <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488\" />\r\n                              </svg>\r\n                              WhatsApp Number\r\n                            </label>\r\n                            <input\r\n                              type=\"tel\"\r\n                              name=\"whatsapp\"\r\n                              value={brokerFormData.whatsapp}\r\n                              onChange={(e) => {\r\n                                const value = e.target.value.replace(/\\D/g, \"\"); // Remove non-digits\r\n                                if (value.length <= 10) {\r\n                                  setBrokerFormData((prev) => ({\r\n                                    ...prev,\r\n                                    whatsapp: value,\r\n                                  }));\r\n                                }\r\n                              }}\r\n                              placeholder=\"Enter your WhatsApp number\"\r\n                              maxLength=\"10\"\r\n                              className=\"w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm font-body\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Step 2: Professional Information / Preferences */}\r\n                {currentStep === 2 && (\r\n                  <div className=\"space-y-8\">\r\n                    {userRole === \"broker\" ? (\r\n                      <>\r\n                        {/* Professional Information Card */}\r\n                        <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\r\n                            <svg\r\n                              className=\"w-5 h-5 text-blue-600 mr-2\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6\"\r\n                              />\r\n                            </svg>\r\n                            Professional Information\r\n                          </h3>\r\n\r\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                License Number{\" \"}\r\n                                <span className=\"text-red-500\">*</span>\r\n                              </label>\r\n                              <div className=\"relative\">\r\n                                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                  <svg\r\n                                    className=\"h-5 w-5 text-gray-400\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                                    />\r\n                                  </svg>\r\n                                </div>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"licenseNumber\"\r\n                                  value={brokerFormData.licenseNumber}\r\n                                  onChange={handleChange}\r\n                                  placeholder=\"e.g., BRE #01234567\"\r\n                                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                                />\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Experience (years)</label>\r\n                              <input\r\n                                type=\"number\"\r\n                                min={0}\r\n                                value={brokerFormData.experience || \"\"}\r\n                                onChange={(e) => {\r\n                                  const val = e.target.value;\r\n                                  // Only allow positive integers, no conversion to 0\r\n                                  const numeric = val === \"\" ? \"\" : (val >= 0 ? parseInt(val, 10) : \"\");\r\n                                  setBrokerFormData((prev) => ({ ...prev, experience: numeric }));\r\n                                }}\r\n                                placeholder=\"e.g., 15\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"md:col-span-2\">\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <label className=\"block text-sm font-medium text-gray-700\">\r\n                                  Address{\" \"}\r\n                                  <span className=\"text-red-500\">*</span>\r\n                                </label>\r\n                                <button\r\n                                  type=\"button\"\r\n                                  onClick={handleUseCurrentLocation}\r\n                                  className=\"flex items-center gap-2 px-3 py-1.5 text-xs font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 hover:border-blue-300 transition-colors duration-200\"\r\n                                >\r\n                                  <svg\r\n                                    className=\"w-4 h-4\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\r\n                                    />\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\r\n                                    />\r\n                                  </svg>\r\n                                  Use Current Location\r\n                                </button>\r\n                              </div>\r\n                              <div className=\"relative\">\r\n                                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10\">\r\n                                  <svg\r\n                                    className=\"h-5 w-5 text-gray-400\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\r\n                                    />\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\r\n                                    />\r\n                                  </svg>\r\n                                </div>\r\n                                <Select\r\n                                  value={selectedOfficeAddress}\r\n                                  onChange={handleOfficeAddressChange}\r\n                                  onInputChange={handleOfficeAddressInputChange}\r\n                                  options={officeAddressOptions}\r\n                                  placeholder={\r\n                                    googleLoaded\r\n                                      ? \"Search for your address...\"\r\n                                      : \"Loading address search...\"\r\n                                  }\r\n                                  isClearable\r\n                                  isSearchable\r\n                                  isLoading={isLoadingAddresses}\r\n                                  noOptionsMessage={() => \"No addresses found\"}\r\n                                  loadingMessage={() =>\r\n                                    \"Searching addresses...\"\r\n                                  }\r\n                                  classNamePrefix=\"react-select\"\r\n                                  styles={{\r\n                                    control: (provided, state) => ({\r\n                                      ...provided,\r\n                                      minHeight: \"48px\",\r\n                                      paddingLeft: \"40px\",\r\n                                      border: state.isFocused\r\n                                        ? \"2px solid #3b82f6\"\r\n                                        : \"1px solid #d1d5db\",\r\n                                      boxShadow: state.isFocused\r\n                                        ? \"0 0 0 3px rgba(59, 130, 246, 0.1)\"\r\n                                        : \"none\",\r\n                                      \"&:hover\": {\r\n                                        border: \"1px solid #9ca3af\",\r\n                                      },\r\n                                    }),\r\n                                    placeholder: (provided) => ({\r\n                                      ...provided,\r\n                                      color: \"#9ca3af\",\r\n                                      fontSize: \"0.875rem\",\r\n                                    }),\r\n                                    input: (provided) => ({\r\n                                      ...provided,\r\n                                      color: \"#374151\",\r\n                                      fontSize: \"0.875rem\",\r\n                                    }),\r\n                                    singleValue: (provided) => ({\r\n                                      ...provided,\r\n                                      color: \"#374151\",\r\n                                      fontSize: \"0.875rem\",\r\n                                    }),\r\n                                    option: (provided, state) => ({\r\n                                      ...provided,\r\n                                      backgroundColor: state.isFocused\r\n                                        ? \"#f3f4f6\"\r\n                                        : \"white\",\r\n                                      color: state.isSelected\r\n                                        ? \"white\"\r\n                                        : \"#374151\",\r\n                                      fontSize: \"0.875rem\",\r\n                                      padding: \"0.75rem 1rem\",\r\n                                    }),\r\n                                    menu: (provided) => ({\r\n                                      ...provided,\r\n                                      zIndex: 9999,\r\n                                      border: \"1px solid #e5e7eb\",\r\n                                      borderRadius: \"0.5rem\",\r\n                                      boxShadow:\r\n                                        \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\r\n                                    }),\r\n                                  }}\r\n                                />\r\n                                {!googleLoaded && (\r\n                                  <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none\">\r\n                                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n\r\n                            {/* About (hardcoded, read-only) */}\r\n                            <div className=\"md:col-span-2\">\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">About</label>\r\n                              <textarea\r\n                                rows={4}\r\n                                value={brokerFormData.about || \"\"}\r\n                                onChange={(e) => setBrokerFormData((prev) => ({ ...prev, about: e.target.value }))}\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700\"\r\n                              />\r\n                             \r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Specializations Card */}\r\n                        <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\r\n                            <svg\r\n                              className=\"w-5 h-5 text-blue-600 mr-2\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"\r\n                              />\r\n                            </svg>\r\n                            Specializations\r\n                          </h3>\r\n\r\n                          <div>\r\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                              Select your specializations\r\n                            </label>\r\n                            <Select\r\n                              isMulti\r\n                              name=\"specializations\"\r\n                              options={specializationOptions.map((spec) => ({\r\n                                value: spec,\r\n                                label: spec,\r\n                              }))}\r\n                              value={\r\n                                Array.isArray(brokerFormData.specializations)\r\n                                  ? brokerFormData.specializations.map(\r\n                                      (spec) => ({\r\n                                        value: spec,\r\n                                        label: spec,\r\n                                      })\r\n                                    )\r\n                                  : []\r\n                              }\r\n                              onChange={handleSpecializationChange}\r\n                              placeholder=\"Select specializations...\"\r\n                              className=\"react-select-container\"\r\n                              classNamePrefix=\"react-select\"\r\n                              styles={{\r\n                                control: (provided, state) => ({\r\n                                  ...provided,\r\n                                  minHeight: \"48px\",\r\n                                  border: state.isFocused\r\n                                    ? \"2px solid #3b82f6\"\r\n                                    : \"1px solid #d1d5db\",\r\n                                  boxShadow: state.isFocused\r\n                                    ? \"0 0 0 3px rgba(59, 130, 246, 0.1)\"\r\n                                    : \"none\",\r\n                                  \"&:hover\": {\r\n                                    border: \"1px solid #3b82f6\",\r\n                                  },\r\n                                }),\r\n                                multiValue: (provided) => ({\r\n                                  ...provided,\r\n                                  backgroundColor: \"#dbeafe\",\r\n                                  color: \"#1e40af\",\r\n                                }),\r\n                                multiValueLabel: (provided) => ({\r\n                                  ...provided,\r\n                                  color: \"#1e40af\",\r\n                                }),\r\n                                multiValueRemove: (provided) => ({\r\n                                  ...provided,\r\n                                  color: \"#1e40af\",\r\n                                  \"&:hover\": {\r\n                                    backgroundColor: \"#bfdbfe\",\r\n                                    color: \"#1e3a8a\",\r\n                                  },\r\n                                }),\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* Social Media Card */}\r\n                        <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\r\n                            <svg\r\n                              className=\"w-5 h-5 text-blue-600 mr-2\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-9 0a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V6a2 2 0 00-2-2M9 4h6\"\r\n                              />\r\n                            </svg>\r\n                            Social Media & Online Presence\r\n                          </h3>\r\n\r\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\r\n                                <svg\r\n                                  className=\"w-4 h-4 text-blue-600 mr-2\"\r\n                                  fill=\"currentColor\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\" />\r\n                                </svg>\r\n                                LinkedIn\r\n                              </label>\r\n                              <input\r\n                                type=\"url\"\r\n                                name=\"linkedin\"\r\n                                value={brokerFormData.linkedin}\r\n                                onChange={handleChange}\r\n                                placeholder=\"https://linkedin.com/in/yourprofile\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\r\n                                <svg\r\n                                  className=\"w-4 h-4 text-blue-400 mr-2\"\r\n                                  fill=\"currentColor\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\" />\r\n                                </svg>\r\n                                Twitter\r\n                              </label>\r\n                              <input\r\n                                type=\"url\"\r\n                                name=\"twitter\"\r\n                                value={brokerFormData.twitter}\r\n                                onChange={handleChange}\r\n                                placeholder=\"https://twitter.com/yourprofile\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\r\n                                <svg\r\n                                  className=\"w-4 h-4 text-pink-500 mr-2\"\r\n                                  fill=\"currentColor\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.099.12.112.225.085.345-.09.375-.293 1.199-.334 1.363-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.746-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24.009c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001.012.001z\" />\r\n                                </svg>\r\n                                Instagram\r\n                              </label>\r\n                              <input\r\n                                type=\"url\"\r\n                                name=\"instagram\"\r\n                                value={brokerFormData.instagram}\r\n                                onChange={handleChange}\r\n                                placeholder=\"https://instagram.com/yourprofile\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\r\n                                <svg\r\n                                  className=\"w-4 h-4 text-blue-600 mr-2\"\r\n                                  fill=\"currentColor\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\r\n                                </svg>\r\n                                Facebook\r\n                              </label>\r\n                              <input\r\n                                type=\"url\"\r\n                                name=\"facebook\"\r\n                                value={brokerFormData.facebook}\r\n                                onChange={handleChange}\r\n                                placeholder=\"https://facebook.com/yourprofile\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                              />\r\n                            </div>\r\n\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center\">\r\n                                <svg\r\n                                  className=\"w-4 h-4 text-blue-600 mr-2\"\r\n                                  fill=\"none\"\r\n                                  stroke=\"currentColor\"\r\n                                  viewBox=\"0 0 24 24\"\r\n                                >\r\n                                  <path\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    strokeWidth=\"2\"\r\n                                    d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9\"\r\n                                  />\r\n                                </svg>\r\n                                Website\r\n                              </label>\r\n                              <input\r\n                                type=\"url\"\r\n                                name=\"website\"\r\n                                value={brokerFormData.website}\r\n                                onChange={handleChange}\r\n                                placeholder=\"https://yourwebsite.com\"\r\n                                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      /* Customer Preferences */\r\n                      <>\r\n                        <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-6 flex items-center\">\r\n                            <svg\r\n                              className=\"w-5 h-5 text-blue-600 mr-2\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\r\n                              />\r\n                            </svg>\r\n                            Property Preferences\r\n                          </h3>\r\n\r\n                          <div className=\"space-y-4\">\r\n                            <div>\r\n                              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                Property Type Preferences\r\n                              </label>\r\n                              <Select\r\n                                isMulti\r\n                                name=\"propertyType\"\r\n                                options={propertyTypeOptions.map((type) => ({\r\n                                  value: type,\r\n                                  label:\r\n                                    type.charAt(0).toUpperCase() +\r\n                                    type.slice(1),\r\n                                }))}\r\n                                value={\r\n                                  Array.isArray(customerFormData.propertyType)\r\n                                    ? customerFormData.propertyType.map(\r\n                                        (type) => ({\r\n                                          value: type,\r\n                                          label:\r\n                                            type.charAt(0).toUpperCase() +\r\n                                            type.slice(1),\r\n                                        })\r\n                                      )\r\n                                    : []\r\n                                }\r\n                                onChange={handlePropertyTypeChange}\r\n                                placeholder=\"Select property types...\"\r\n                                className=\"react-select-container\"\r\n                                classNamePrefix=\"react-select\"\r\n                                styles={{\r\n                                  control: (provided, state) => ({\r\n                                    ...provided,\r\n                                    minHeight: \"48px\",\r\n                                    border: state.isFocused\r\n                                      ? \"2px solid #3b82f6\"\r\n                                      : \"1px solid #d1d5db\",\r\n                                    boxShadow: state.isFocused\r\n                                      ? \"0 0 0 3px rgba(59, 130, 246, 0.1)\"\r\n                                      : \"none\",\r\n                                    \"&:hover\": {\r\n                                      border: \"1px solid #3b82f6\",\r\n                                    },\r\n                                  }),\r\n                                  multiValue: (provided) => ({\r\n                                    ...provided,\r\n                                    backgroundColor: \"#dbeafe\",\r\n                                    color: \"#1e40af\",\r\n                                  }),\r\n                                  multiValueLabel: (provided) => ({\r\n                                    ...provided,\r\n                                    color: \"#1e40af\",\r\n                                  }),\r\n                                  multiValueRemove: (provided) => ({\r\n                                    ...provided,\r\n                                    color: \"#1e40af\",\r\n                                    \"&:hover\": {\r\n                                      backgroundColor: \"#bfdbfe\",\r\n                                      color: \"#1e3a8a\",\r\n                                    },\r\n                                  }),\r\n                                }}\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                              <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                  Budget Min (₹)\r\n                                </label>\r\n                                <input\r\n                                  type=\"number\"\r\n                                  name=\"budgetMin\"\r\n                                  value={customerFormData.budgetMin}\r\n                                  onChange={handleChange}\r\n                                  placeholder=\"Enter minimum budget\"\r\n                                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 ${\r\n                                    budgetError\r\n                                      ? \"border-red-500 focus:ring-red-500 focus:border-red-500\"\r\n                                      : \"border-gray-300 focus:ring-blue-500 focus:border-blue-500\"\r\n                                  }`}\r\n                                />\r\n                              </div>\r\n                              <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                                  Budget Max (₹)\r\n                                </label>\r\n                                <input\r\n                                  type=\"number\"\r\n                                  name=\"budgetMax\"\r\n                                  value={customerFormData.budgetMax}\r\n                                  onChange={handleChange}\r\n                                  placeholder=\"Enter maximum budget\"\r\n                                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 ${\r\n                                    budgetError\r\n                                      ? \"border-red-500 focus:ring-red-500 focus:border-red-500\"\r\n                                      : \"border-gray-300 focus:ring-blue-500 focus:border-blue-500\"\r\n                                  }`}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n\r\n                            {/* Budget Error Message */}\r\n                            {budgetError && (\r\n                              <div className=\"mt-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\r\n                                <div className=\"flex items-center\">\r\n                                  <svg\r\n                                    className=\"w-5 h-5 text-red-500 mr-2\"\r\n                                    fill=\"none\"\r\n                                    stroke=\"currentColor\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                  >\r\n                                    <path\r\n                                      strokeLinecap=\"round\"\r\n                                      strokeLinejoin=\"round\"\r\n                                      strokeWidth=\"2\"\r\n                                      d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                                    />\r\n                                  </svg>\r\n                                  <span className=\"text-red-700 text-sm font-medium\">\r\n                                    {budgetError}\r\n                                  </span>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Step 3: Regions (Only for Brokers) */}\r\n                {currentStep === 3 && userRole === \"broker\" && (\r\n                  <div className=\"space-y-8\">\r\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                      <div className=\"mb-6 flex items-center justify-between\">\r\n                        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\r\n                          <svg\r\n                            className=\"w-5 h-5 text-blue-600 mr-2\"\r\n                            fill=\"none\"\r\n                            stroke=\"currentColor\"\r\n                            viewBox=\"0 0 24 24\"\r\n                          >\r\n                            <path\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                              strokeWidth=\"2\"\r\n                              d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\r\n                            />\r\n                            <path\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                              strokeWidth=\"2\"\r\n                              d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\r\n                            />\r\n                          </svg>\r\n                          Preferred Regions{\" \"}\r\n                          <span className=\"text-red-500\">*</span>\r\n                        </h3>\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={() => setNearestMode((v) => !v)}\r\n                          className=\"inline-flex items-center px-3 py-1.5 text-xs rounded border border-gray-200 bg-white hover:bg-gray-50\"\r\n                        >\r\n                          {nearestMode ? \"Choose manually\" : \"Use nearest\"}\r\n                        </button>\r\n                      </div>\r\n\r\n                      {!nearestMode && (\r\n                        <div className=\"mb-6\">\r\n                          <p className=\"text-sm text-gray-600\">\r\n                            {userRole === \"broker\"\r\n                              ? \"Select the regions where you provide real estate services\"\r\n                              : \"Select the regions where you are looking for properties\"}\r\n                          </p>\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* State and City Selection - Above (hidden in nearest mode) */}\r\n                      {!nearestMode && (\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-2\">\r\n                          {/* State Selection */}\r\n                          <div className=\"mb-4\">\r\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                              State <span className=\"text-red-500\">*</span>\r\n                            </label>\r\n                            <Select\r\n                              name=\"state\"\r\n                              options={statesList}\r\n                              value={selectedState}\r\n                              onChange={handleStateChange}\r\n                              placeholder=\"Select state...\"\r\n                              className=\"react-select-container\"\r\n                              classNamePrefix=\"react-select\"\r\n                              styles={{\r\n                                control: (provided) => ({\r\n                                  ...provided,\r\n                                  border: \"1px solid #d1d5db\",\r\n                                  borderRadius: \"0.5rem\",\r\n                                  minHeight: \"48px\",\r\n                                  fontSize: \"14px\",\r\n                                }),\r\n                              }}\r\n                            />\r\n                          </div>\r\n\r\n                          {/* City Selection */}\r\n                          <div className=\"mb-4\">\r\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                              City <span className=\"text-red-500\">*</span>\r\n                            </label>\r\n                            <Select\r\n                              name=\"city\"\r\n                              options={citiesList}\r\n                              value={selectedCity}\r\n                              onChange={handleCityChange}\r\n                              placeholder=\"Select city...\"\r\n                              className=\"react-select-container\"\r\n                              classNamePrefix=\"react-select\"\r\n                              styles={{\r\n                                control: (provided) => ({\r\n                                  ...provided,\r\n                                  border: \"1px solid #d1d5db\",\r\n                                  borderRadius: \"0.5rem\",\r\n                                  minHeight: \"48px\",\r\n                                  fontSize: \"14px\",\r\n                                }),\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* Toggle moved to header above */}\r\n\r\n                      {/* Region Selection - Below */}\r\n                      <div className=\"mb-4\">\r\n                        {!nearestMode && (\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                            Regions <span className=\"text-red-500\">*</span>\r\n                          </label>\r\n                        )}\r\n                        {regionsLoading ? (\r\n                          <div className=\"flex items-center justify-center py-4\">\r\n                            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\r\n                            <span className=\"ml-3 text-gray-600\">\r\n                              Loading regions...\r\n                            </span>\r\n                          </div>\r\n                        ) : regionsError ? (\r\n                          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n                            <p className=\"text-sm text-red-600\">\r\n                              {regionsError}\r\n                            </p>\r\n                          </div>\r\n                        ) : nearestMode ? (\r\n                          <div>\r\n                            <div className=\"mb-2 text-[13px] text-slate-600 flex items-center gap-2\">\r\n                              Showing nearest regions based on your location.\r\n                              Choose one.\r\n                            </div>\r\n\r\n                            {nearestRegionsError && (\r\n                              <div className=\"text-[13px] text-rose-600 mb-2\">\r\n                                {nearestRegionsError}\r\n                              </div>\r\n                            )}\r\n\r\n                            {nearestRegionsLoading ? (\r\n                              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-3\">\r\n                                {[1, 2, 3, 4, 5].map((i) => (\r\n                                  <div\r\n                                    key={i}\r\n                                    className=\"relative p-4 rounded-xl border border-gray-200 bg-white animate-pulse\"\r\n                                  >\r\n                                    <div className=\"flex items-start justify-between\">\r\n                                      <div className=\"flex-1\">\r\n                                        <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\r\n                                        <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-1\"></div>\r\n                                        <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                ))}\r\n                              </div>\r\n                            ) : (\r\n                              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-3\">\r\n                                {(Array.isArray(nearestRegions)\r\n                                  ? nearestRegions.slice(0, 5)\r\n                                  : []\r\n                                ).map((r) => {\r\n                                  const id = r._id || r.id;\r\n                                  const label = r.name || r.region;\r\n                                  const place =\r\n                                    r.centerLocation ||\r\n                                    [r.city, r.state]\r\n                                      .filter(Boolean)\r\n                                      .join(\", \");\r\n                                  const dist =\r\n                                    typeof r.distanceKm === \"number\"\r\n                                      ? r.distanceKm\r\n                                      : null;\r\n                                  const distanceText =\r\n                                    dist !== null\r\n                                      ? `${\r\n                                          dist >= 10\r\n                                            ? Math.round(dist)\r\n                                            : Math.round(dist * 10) / 10\r\n                                        } km away`\r\n                                      : \"\";\r\n                                  const brokersText =\r\n                                    typeof r.brokerCount === \"number\"\r\n                                      ? `${r.brokerCount} Broker${\r\n                                          r.brokerCount === 1 ? \"\" : \"s\"\r\n                                        }`\r\n                                      : \"\";\r\n                                  const isSelected =\r\n                                    Array.isArray(brokerFormData.regions) &&\r\n                                    brokerFormData.regions.some((region) => {\r\n                                      if (\r\n                                        typeof region === \"object\" &&\r\n                                        region._id\r\n                                      ) {\r\n                                        return region._id === id;\r\n                                      } else if (typeof region === \"string\") {\r\n                                        return region === id;\r\n                                      }\r\n                                      return false;\r\n                                    });\r\n                                  return (\r\n                                    <button\r\n                                      key={id || label}\r\n                                      type=\"button\"\r\n                                      onClick={() => {\r\n                                        setBrokerFormData((prev) => ({\r\n                                          ...prev,\r\n                                          regions: isSelected ? [] : [id],\r\n                                          state: isSelected ? \"\" : (r.state || prev.state || \"\"),\r\n                                          city: isSelected ? \"\" : (r.city || prev.city || \"\"),\r\n                                        }));\r\n                                        setCanUploadDocs(!isSelected);\r\n                                      }}\r\n                                      className={`relative text-left p-4 rounded-xl border transition-all ${\r\n                                        isSelected\r\n                                          ? \"border-sky-500 ring-2 ring-sky-100 shadow\"\r\n                                          : \"border-gray-200 hover:border-sky-400 hover:shadow-sm\"\r\n                                      } bg-white`}\r\n                                    >\r\n                                      <div className=\"flex items-start justify-between\">\r\n                                        <div>\r\n                                          <div className=\"text-[14px] font-semibold text-slate-900\">\r\n                                            {label}\r\n                                          </div>\r\n                                          {place ? (\r\n                                            <div className=\"text-[12px] text-slate-500\">\r\n                                              {place}\r\n                                            </div>\r\n                                          ) : null}\r\n                                          {(distanceText || brokersText) && (\r\n                                            <div className=\"text-[12px] text-slate-600 mt-1\">\r\n                                              {[distanceText, brokersText]\r\n                                                .filter(Boolean)\r\n                                                .join(\" / \")}\r\n                                            </div>\r\n                                          )}\r\n                                          {/* nearest badge removed per request */}\r\n                                        </div>\r\n                                        {isSelected && (\r\n                                          <div className=\"absolute top-2 right-2 w-7 h-7 rounded-full bg-sky-600 text-white flex items-center justify-center\">\r\n                                            ✓\r\n                                          </div>\r\n                                        )}\r\n                                      </div>\r\n                                    </button>\r\n                                  );\r\n                                })}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        ) : (\r\n                          <Select\r\n                            name=\"regions\"\r\n                            options={(() => {\r\n                              const options = Array.isArray(regionsList)\r\n                                ? regionsList.map((region) => ({\r\n                                    value: region._id,\r\n                                    label: region.name,\r\n                                  }))\r\n                                : [];\r\n                              return options;\r\n                            })()}\r\n                            value={\r\n                              Array.isArray(brokerFormData.regions) &&\r\n                              brokerFormData.regions.length > 0 &&\r\n                              Array.isArray(regionsList)\r\n                                ? (() => {\r\n                                    const region = brokerFormData.regions[0];\r\n                                    if (\r\n                                      typeof region === \"object\" &&\r\n                                      region._id\r\n                                    ) {\r\n                                      return {\r\n                                        value: region._id,\r\n                                        label: region.name,\r\n                                      };\r\n                                    } else if (typeof region === \"string\") {\r\n                                      const regionObj = regionsList.find(\r\n                                        (r) => r._id === region\r\n                                      );\r\n                                      return regionObj\r\n                                        ? {\r\n                                            value: regionObj._id,\r\n                                            label: regionObj.name,\r\n                                          }\r\n                                        : null;\r\n                                    }\r\n                                    return null;\r\n                                  })()\r\n                                : null\r\n                            }\r\n                            onChange={handleRegionChange}\r\n                            placeholder=\"Select a region...\"\r\n                            className=\"react-select-container\"\r\n                            classNamePrefix=\"react-select\"\r\n                            styles={{\r\n                              control: (provided) => ({\r\n                                ...provided,\r\n                                border: \"1px solid #d1d5db\",\r\n                                borderRadius: \"0.5rem\",\r\n                                minHeight: \"48px\",\r\n                                fontSize: \"14px\",\r\n                              }),\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Step 3: Documents (Only for Customers) */}\r\n                {currentStep === 3 && userRole === \"customer\" && (\r\n                  <div className=\"space-y-6\">\r\n                    <div className=\"flex items-center mb-6\">\r\n                      <svg\r\n                        className=\"w-6 h-6 text-gray-600 mr-3\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                        />\r\n                      </svg>\r\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                        Documents\r\n                      </h3>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6 shadow-sm\">\r\n                      <p className=\"text-gray-600 text-center py-8\">\r\n                        No documents required for customer accounts.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Step 4: Documents (Only for Brokers) - OPTIONAL */}\r\n                {currentStep === 4 && userRole === \"broker\" && (\r\n                  <div className=\"space-y-6\">\r\n                    <div className=\"flex items-center mb-6\">\r\n                      <svg\r\n                        className=\"w-6 h-6 text-gray-600 mr-3\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                        />\r\n                      </svg>\r\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                        Documents{\" \"}\r\n                        <span className=\"text-sm font-normal text-gray-500\">\r\n                          (Optional)\r\n                        </span>\r\n                      </h3>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                      {/* Aadhar File Upload */}\r\n                      <div className=\"flex flex-col h-full\">\r\n                        <label className=\"block text-sm font-medium text-gray-900 mb-2\">\r\n                          Aadhar Card\r\n                        </label>\r\n                        <div className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors flex-1 flex flex-col justify-center ${canUploadDocs ? \"border-gray-300 hover:border-blue-400\" : \"border-gray-200 bg-gray-50 opacity-70 cursor-not-allowed\"}`}>\r\n                          <input\r\n                            type=\"file\"\r\n                            name=\"aadharFile\"\r\n                            onChange={handleFileChange}\r\n                            accept=\".pdf,.jpg,.jpeg,.png\"\r\n                            className=\"hidden\"\r\n                            id=\"aadhar-upload\"\r\n                            disabled={!canUploadDocs}\r\n                          />\r\n                          <label\r\n                            htmlFor=\"aadhar-upload\"\r\n                            className={`cursor-pointer ${!canUploadDocs ? \"pointer-events-none\" : \"\"}`}\r\n                          >\r\n                            <div className=\"relative mx-auto w-full max-w-[380px] rounded-md bg-white\" style={{ aspectRatio: '85/54' }}>\r\n                              {isImageFile(brokerFormData.aadharFile) && getImageSrc(brokerFormData.aadharFile) ? (\r\n                                <div className=\"absolute inset-0\">\r\n                                  <img src={getImageSrc(brokerFormData.aadharFile)} alt=\"Aadhar Preview\" className=\"w-full h-full object-contain\" />\r\n                                  <a\r\n                                    href={getImageSrc(brokerFormData.aadharFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"absolute top-2 right-2 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors shadow-lg\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View\r\n                                  </a>\r\n                                </div>\r\n                              ) : isPdfFile(brokerFormData.aadharFile) && getPdfSrc(brokerFormData.aadharFile) ? (\r\n                                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 border-2 border-red-200 rounded-md p-2\">\r\n                                  <svg className=\"h-10 w-10 text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                                  </svg>\r\n                                  <span className=\"text-xs font-medium text-red-700 text-center\">PDF Document</span>\r\n                                  <div className=\"text-xs text-red-600 mt-1 text-center truncate w-full px-1\" title={brokerFormData.aadharFile?.name || 'PDF File'}>\r\n                                    {brokerFormData.aadharFile?.name || 'PDF File'}\r\n                                  </div>\r\n                                  <a\r\n                                    href={getPdfSrc(brokerFormData.aadharFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"mt-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View PDF\r\n                                  </a>\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                  <svg\r\n                                    className=\"h-10 w-10 text-gray-400\"\r\n                              stroke=\"currentColor\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 48 48\"\r\n                            >\r\n                              <path\r\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                              />\r\n                            </svg>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mt-2\"></div>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* PAN File Upload */}\r\n                      <div className=\"flex flex-col h-full\">\r\n                        <label className=\"block text-sm font-medium text-gray-900 mb-2\">\r\n                          PAN Card\r\n                        </label>\r\n                        <div className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors flex-1 flex flex-col justify-center ${canUploadDocs ? \"border-gray-300 hover:border-blue-400\" : \"border-gray-200 bg-gray-50 opacity-70 cursor-not-allowed\"}`}>\r\n                          <input\r\n                            type=\"file\"\r\n                            name=\"panFile\"\r\n                            onChange={handleFileChange}\r\n                            accept=\".pdf,.jpg,.jpeg,.png\"\r\n                            className=\"hidden\"\r\n                            id=\"pan-upload\"\r\n                            disabled={!canUploadDocs}\r\n                          />\r\n                          <label\r\n                            htmlFor=\"pan-upload\"\r\n                            className={`cursor-pointer ${!canUploadDocs ? \"pointer-events-none\" : \"\"}`}\r\n                          >\r\n                            <div className=\"relative mx-auto w-full max-w-[380px] rounded-md bg-white\" style={{ aspectRatio: '85/54' }}>\r\n                              {isImageFile(brokerFormData.panFile) && getImageSrc(brokerFormData.panFile) ? (\r\n                                <div className=\"absolute inset-0\">\r\n                                  <img src={getImageSrc(brokerFormData.panFile)} alt=\"PAN Preview\" className=\"w-full h-full object-contain\" />\r\n                                  <a\r\n                                    href={getImageSrc(brokerFormData.panFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"absolute top-2 right-2 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors shadow-lg\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View\r\n                                  </a>\r\n                                </div>\r\n                              ) : isPdfFile(brokerFormData.panFile) && getPdfSrc(brokerFormData.panFile) ? (\r\n                                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 border-2 border-red-200 rounded-md p-2\">\r\n                                  <svg className=\"h-10 w-10 text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                                  </svg>\r\n                                  <span className=\"text-xs font-medium text-red-700 text-center\">PDF Document</span>\r\n                                  <div className=\"text-xs text-red-600 mt-1 text-center truncate w-full px-1\" title={brokerFormData.panFile?.name || 'PDF File'}>\r\n                                    {brokerFormData.panFile?.name || 'PDF File'}\r\n                                  </div>\r\n                                  <a\r\n                                    href={getPdfSrc(brokerFormData.panFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"mt-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View PDF\r\n                                  </a>\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                  <svg\r\n                                    className=\"h-10 w-10 text-gray-400\"\r\n                              stroke=\"currentColor\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 48 48\"\r\n                            >\r\n                              <path\r\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                              />\r\n                            </svg>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mt-2\"></div>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* GST File Upload */}\r\n                      <div className=\"flex flex-col h-full\">\r\n                        <label className=\"block text-sm font-medium text-gray-900 mb-2\">\r\n                          GST Certificate\r\n                        </label>\r\n                        <div className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors flex-1 flex flex-col justify-center ${canUploadDocs ? \"border-gray-300 hover:border-blue-400\" : \"border-gray-200 bg-gray-50 opacity-70 cursor-not-allowed\"}`}>\r\n                          <input\r\n                            type=\"file\"\r\n                            name=\"gstFile\"\r\n                            onChange={handleFileChange}\r\n                            accept=\".pdf,.jpg,.jpeg,.png\"\r\n                            className=\"hidden\"\r\n                            id=\"gst-upload\"\r\n                            disabled={!canUploadDocs}\r\n                          />\r\n                          <label\r\n                            htmlFor=\"gst-upload\"\r\n                            className={`cursor-pointer ${!canUploadDocs ? \"pointer-events-none\" : \"\"}`}\r\n                          >\r\n                            <div className=\"relative mx-auto w-full max-w-[380px] rounded-md bg-white\" style={{ aspectRatio: '85/54' }}>\r\n                              {isImageFile(brokerFormData.gstFile) && getImageSrc(brokerFormData.gstFile) ? (\r\n                                <div className=\"absolute inset-0\">\r\n                                  <img src={getImageSrc(brokerFormData.gstFile)} alt=\"GST Preview\" className=\"w-full h-full object-contain\" />\r\n                                  <a\r\n                                    href={getImageSrc(brokerFormData.gstFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"absolute top-2 right-2 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors shadow-lg\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View\r\n                                  </a>\r\n                                </div>\r\n                              ) : isPdfFile(brokerFormData.gstFile) && getPdfSrc(brokerFormData.gstFile) ? (\r\n                                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 border-2 border-red-200 rounded-md p-2\">\r\n                                  <svg className=\"h-10 w-10 text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                                  </svg>\r\n                                  <span className=\"text-xs font-medium text-red-700 text-center\">PDF Document</span>\r\n                                  <div className=\"text-xs text-red-600 mt-1 text-center truncate w-full px-1\" title={brokerFormData.gstFile?.name || 'PDF File'}>\r\n                                    {brokerFormData.gstFile?.name || 'PDF File'}\r\n                                  </div>\r\n                                  <a\r\n                                    href={getPdfSrc(brokerFormData.gstFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"mt-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View PDF\r\n                                  </a>\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                  <svg\r\n                                    className=\"h-10 w-10 text-gray-400\"\r\n                              stroke=\"currentColor\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 48 48\"\r\n                            >\r\n                              <path\r\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                              />\r\n                            </svg>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mt-2\"></div>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Broker License File Upload */}\r\n                      <div className=\"flex flex-col h-full\">\r\n                        <label className=\"block text-sm font-medium text-gray-900 mb-2\">\r\n                          Broker License\r\n                        </label>\r\n                        <div className={`border-2 border-dashed rounded-lg p-4 text-center transition-colors flex-1 flex flex-col justify-center ${canUploadDocs ? \"border-gray-300 hover:border-blue-400\" : \"border-gray-200 bg-gray-50 opacity-70 cursor-not-allowed\"}`}>\r\n                          <input\r\n                            type=\"file\"\r\n                            name=\"brokerLicenseFile\"\r\n                            onChange={handleFileChange}\r\n                            accept=\".pdf,.jpg,.jpeg,.png\"\r\n                            className=\"hidden\"\r\n                            id=\"broker-license-upload\"\r\n                            disabled={!canUploadDocs}\r\n                          />\r\n                          <label\r\n                            htmlFor=\"broker-license-upload\"\r\n                            className={`cursor-pointer ${!canUploadDocs ? \"pointer-events-none\" : \"\"}`}\r\n                          >\r\n                            <div className=\"relative mx-auto w-full max-w-[380px] rounded-md bg-white\" style={{ aspectRatio: '85/54' }}>\r\n                              {isImageFile(brokerFormData.brokerLicenseFile) && getImageSrc(brokerFormData.brokerLicenseFile) ? (\r\n                                <div className=\"absolute inset-0\">\r\n                                  <img src={getImageSrc(brokerFormData.brokerLicenseFile)} alt=\"License Preview\" className=\"w-full h-full object-contain\" />\r\n                                  <a\r\n                                    href={getImageSrc(brokerFormData.brokerLicenseFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"absolute top-2 right-2 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors shadow-lg\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View\r\n                                  </a>\r\n                                </div>\r\n                              ) : isPdfFile(brokerFormData.brokerLicenseFile) && getPdfSrc(brokerFormData.brokerLicenseFile) ? (\r\n                                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 border-2 border-red-200 rounded-md p-2\">\r\n                                  <svg className=\"h-10 w-10 text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                                  </svg>\r\n                                  <span className=\"text-xs font-medium text-red-700 text-center\">PDF Document</span>\r\n                                  <div className=\"text-xs text-red-600 mt-1 text-center truncate w-full px-1\" title={brokerFormData.brokerLicenseFile?.name || 'PDF File'}>\r\n                                    {brokerFormData.brokerLicenseFile?.name || 'PDF File'}\r\n                                  </div>\r\n                                  <a\r\n                                    href={getPdfSrc(brokerFormData.brokerLicenseFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"mt-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View PDF\r\n                                  </a>\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                  <svg\r\n                                    className=\"h-10 w-10 text-gray-400\"\r\n                              stroke=\"currentColor\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 48 48\"\r\n                            >\r\n                              <path\r\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                              />\r\n                            </svg>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mt-2\"></div>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Company Identification Details File Upload */}\r\n                      <div className=\"flex flex-col h-full\">\r\n                        <label className=\"block text-sm font-medium text-gray-900 mb-2\">\r\n                          Company Identification Details\r\n                        </label>\r\n                        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-blue-400 transition-colors flex-1 flex flex-col justify-center\">\r\n                          <input\r\n                            type=\"file\"\r\n                            name=\"companyIdFile\"\r\n                            onChange={handleFileChange}\r\n                            accept=\".pdf,.jpg,.jpeg,.png\"\r\n                            className=\"hidden\"\r\n                            id=\"company-id-upload\"\r\n                          />\r\n                          <label\r\n                            htmlFor=\"company-id-upload\"\r\n                            className=\"cursor-pointer\"\r\n                          >\r\n                            <div className=\"relative mx-auto w-full max-w-[380px] rounded-md bg-white\" style={{ aspectRatio: '85/54' }}>\r\n                              {isImageFile(brokerFormData.companyIdFile) && getImageSrc(brokerFormData.companyIdFile) ? (\r\n                                <img src={getImageSrc(brokerFormData.companyIdFile)} alt=\"Company ID Preview\" className=\"absolute inset-0 w-full h-full object-contain\" />\r\n                              ) : isPdfFile(brokerFormData.companyIdFile) && getPdfSrc(brokerFormData.companyIdFile) ? (\r\n                                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-red-50 border-2 border-red-200 rounded-md p-2\">\r\n                                  <svg className=\"h-10 w-10 text-red-500 mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                                  </svg>\r\n                                  <span className=\"text-xs font-medium text-red-700 text-center\">PDF Document</span>\r\n                                  <div className=\"text-xs text-red-600 mt-1 text-center truncate w-full px-1\" title={brokerFormData.companyIdFile?.name || 'PDF File'}>\r\n                                    {brokerFormData.companyIdFile?.name || 'PDF File'}\r\n                                  </div>\r\n                                  <a\r\n                                    href={getPdfSrc(brokerFormData.companyIdFile)}\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    className=\"mt-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    View PDF\r\n                                  </a>\r\n                                </div>\r\n                              ) : (\r\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                                  <svg\r\n                                    className=\"h-10 w-10 text-gray-400\"\r\n                              stroke=\"currentColor\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 48 48\"\r\n                            >\r\n                              <path\r\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                                strokeWidth=\"2\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                              />\r\n                            </svg>\r\n                                </div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"mt-2\"></div>\r\n                          </label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Navigation Button - hidden in view mode */}\r\n                {!isViewMode && (\r\n                <div className=\"mt-12 pt-8 border-t border-gray-100\">\r\n                  <div className=\"max-w-3xl mx-auto\">\r\n                    {currentStep < totalSteps ? (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={nextStep}\r\n                        disabled={isCheckingEmail || !validateStep(currentStep)}\r\n                        className=\"w-full py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-heading text-lg hover:from-blue-700 hover:to-blue-800 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-4 focus:ring-blue-100 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5\"\r\n                      >\r\n                        {isCheckingEmail ? (\r\n                          <>\r\n                            <svg\r\n                              className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white inline\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              fill=\"none\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <circle\r\n                                className=\"opacity-25\"\r\n                                cx=\"12\"\r\n                                cy=\"12\"\r\n                                r=\"10\"\r\n                                stroke=\"currentColor\"\r\n                                strokeWidth=\"4\"\r\n                              ></circle>\r\n                              <path\r\n                                className=\"opacity-75\"\r\n                                fill=\"currentColor\"\r\n                                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n                              ></path>\r\n                            </svg>\r\n                            Checking email...\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            {mode === 'create' ? `Continue to ${getStepTitle(currentStep + 1)}` : 'Update'}\r\n                            <svg\r\n                              className=\"w-5 h-5 ml-2 inline\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M9 5l7 7-7 7\"\r\n                              />\r\n                            </svg>\r\n                          </>\r\n                        )}\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async (e) => {\r\n                          e.preventDefault();\r\n                          setSubmitting(true);\r\n\r\n                          const currentFormData =\r\n                            userRole === \"customer\"\r\n                              ? customerFormData\r\n                              : brokerFormData;\r\n\r\n                          // Only validate regions for brokers\r\n                          if (\r\n                            userRole === \"broker\" &&\r\n                            (!Array.isArray(currentFormData.regions) ||\r\n                              currentFormData.regions.length === 0)\r\n                          ) {\r\n                            toast.error(\"Please select at least one region.\");\r\n                            setSubmitting(false);\r\n                            return;\r\n                          }\r\n\r\n                          try {\r\n                            if (!user?.token) {\r\n                              toast.error(\r\n                                \"No authentication token found. Please login again.\"\r\n                              );\r\n                              setSubmitting(false);\r\n                              return;\r\n                            }\r\n\r\n                            // Create FormData for multipart/form-data submission\r\n                            const formDataToSend = new FormData();\r\n                            formDataToSend.append(\r\n                              \"phone\",\r\n                              currentFormData.phone\r\n                            );\r\n                            formDataToSend.append(\"name\", currentFormData.name);\r\n                            formDataToSend.append(\r\n                              \"email\",\r\n                              currentFormData.email\r\n                            );\r\n\r\n                            if (userRole === \"customer\") {\r\n                              // Customer-specific fields - matching the API structure\r\n                              formDataToSend.append(\r\n                                \"customerDetails[preferences][budgetMin]\",\r\n                                currentFormData.budgetMin\r\n                                  ? Number(currentFormData.budgetMin)\r\n                                  : \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"customerDetails[preferences][budgetMax]\",\r\n                                currentFormData.budgetMax\r\n                                  ? Number(currentFormData.budgetMax)\r\n                                  : \"\"\r\n                              );\r\n\r\n                              // Add property types\r\n                              currentFormData.propertyType.forEach(\r\n                                (type, index) => {\r\n                                  formDataToSend.append(\r\n                                    `customerDetails[preferences][propertyType][${index}]`,\r\n                                    type\r\n                                  );\r\n                                }\r\n                              );\r\n\r\n                              // Add customer gender\r\n                              formDataToSend.append(\r\n                                \"customerDetails[gender]\",\r\n                                currentFormData.gender || \"\"\r\n                              );\r\n\r\n                              formDataToSend.append(\r\n                                \"customerDetails[inquiryCount]\",\r\n                                currentFormData.inquiryCount || 0\r\n                              );\r\n\r\n                              // Add customer image\r\n                              if (currentFormData.customerImage) {\r\n                                // Check if it's a File object or a string URL\r\n                                if (\r\n                                  currentFormData.customerImage instanceof File\r\n                                ) {\r\n                                  formDataToSend.append(\r\n                                    \"customerImage\",\r\n                                    currentFormData.customerImage\r\n                                  );\r\n                                } else if (\r\n                                  typeof currentFormData.customerImage ===\r\n                                  \"string\"\r\n                                ) {\r\n                                  // If it's a URL string, we might need to fetch it as a file\r\n                                  // For now, we'll skip URL strings as they're already uploaded\r\n                                }\r\n                              }\r\n                            } else {\r\n                              // Broker-specific fields\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[firmName]\",\r\n                                currentFormData.firmName || \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[licenseNumber]\",\r\n                                currentFormData.licenseNumber || \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[address]\",\r\n                                currentFormData.officeAddress ||\r\n                                  currentFormData.address ||\r\n                                  \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[state]\",\r\n                                currentFormData.state || (Array.isArray(currentFormData.regions) && currentFormData.regions[0]?.state) || \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[city]\",\r\n                                currentFormData.city || (Array.isArray(currentFormData.regions) && currentFormData.regions[0]?.city) || \"\"\r\n                              );\r\n                              formDataToSend.append(\r\n                                \"brokerDetails[gender]\",\r\n                                currentFormData.gender || \"\"\r\n                              );\r\n\r\n                              // Include About and Experience years at top-level as requested\r\n                              if (typeof currentFormData.about === \"string\") {\r\n                                formDataToSend.append(\r\n                                  \"content\",\r\n                                  currentFormData.about\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.experience !== undefined &&\r\n                                currentFormData.experience !== null &&\r\n                                String(currentFormData.experience) !== \"\"\r\n                              ) {\r\n                                // Ensure we send the exact value entered by user\r\n                                formDataToSend.append(\r\n                                  \"experienceYears\",\r\n                                  String(currentFormData.experience)\r\n                                );\r\n                              }\r\n\r\n                              // Add specializations\r\n                              if (\r\n                                currentFormData.specializations &&\r\n                                currentFormData.specializations.length > 0\r\n                              ) {\r\n                                currentFormData.specializations.forEach(\r\n                                  (spec, index) => {\r\n                                    formDataToSend.append(\r\n                                      `brokerDetails[specializations][${index}]`,\r\n                                      spec\r\n                                    );\r\n                                  }\r\n                                );\r\n                              }\r\n\r\n                              // Add social media\r\n                              if (currentFormData.linkedin) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[socialMedia][linkedin]\",\r\n                                  currentFormData.linkedin\r\n                                );\r\n                              }\r\n                              if (currentFormData.twitter) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[socialMedia][twitter]\",\r\n                                  currentFormData.twitter\r\n                                );\r\n                              }\r\n                              if (currentFormData.instagram) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[socialMedia][instagram]\",\r\n                                  currentFormData.instagram\r\n                                );\r\n                              }\r\n                              if (currentFormData.facebook) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[socialMedia][facebook]\",\r\n                                  currentFormData.facebook\r\n                                );\r\n                              }\r\n                              if (currentFormData.whatsapp) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[whatsappNumber]\",\r\n                                  currentFormData.whatsapp\r\n                                );\r\n                              }\r\n                              if (currentFormData.website) {\r\n                                formDataToSend.append(\r\n                                  \"brokerDetails[website]\",\r\n                                  currentFormData.website\r\n                                );\r\n                              }\r\n\r\n                              // Add regions\r\n                              currentFormData.regions.forEach(\r\n                                (region, index) => {\r\n                                  const regionId =\r\n                                    typeof region === \"object\"\r\n                                      ? region._id\r\n                                      : region;\r\n                                  formDataToSend.append(\r\n                                    `brokerDetails[region][${index}]`,\r\n                                    regionId\r\n                                  );\r\n                                }\r\n                              );\r\n\r\n                              // Add file uploads - only append if they are File objects\r\n                              if (\r\n                                currentFormData.aadharFile &&\r\n                                currentFormData.aadharFile instanceof File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"aadhar\",\r\n                                  currentFormData.aadharFile\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.panFile &&\r\n                                currentFormData.panFile instanceof File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"pan\",\r\n                                  currentFormData.panFile\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.gstFile &&\r\n                                currentFormData.gstFile instanceof File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"gst\",\r\n                                  currentFormData.gstFile\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.brokerLicenseFile &&\r\n                                currentFormData.brokerLicenseFile instanceof\r\n                                  File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"brokerLicense\",\r\n                                  currentFormData.brokerLicenseFile\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.companyIdFile &&\r\n                                currentFormData.companyIdFile instanceof File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"companyId\",\r\n                                  currentFormData.companyIdFile\r\n                                );\r\n                              }\r\n                              if (\r\n                                currentFormData.brokerImage &&\r\n                                currentFormData.brokerImage instanceof File\r\n                              ) {\r\n                                formDataToSend.append(\r\n                                  \"brokerImage\",\r\n                                  currentFormData.brokerImage\r\n                                );\r\n                              }\r\n                            }\r\n\r\n                            const res = await fetch(\r\n                              `${process.env.NEXT_PUBLIC_API_URL}/auth/complete-profile`,\r\n                              {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                  Authorization: `Bearer ${user.token}`,\r\n                                },\r\n                                body: formDataToSend,\r\n                              }\r\n                            );\r\n\r\n                            if (!res.ok) {\r\n                              let errorMessage = \"Failed to update profile\";\r\n\r\n                              try {\r\n                                const errorData = await res.json();\r\n\r\n                                // Handle specific error types\r\n                                if (\r\n                                  errorData.error &&\r\n                                  errorData.error.includes(\"E11000\")\r\n                                ) {\r\n                                  // Duplicate key error (email already exists)\r\n                                  errorMessage =\r\n                                    \"This email address is already registered. Please use a different email.\";\r\n                                } else if (\r\n                                  errorData.error &&\r\n                                  errorData.error.includes(\"validation\")\r\n                                ) {\r\n                                  // Validation error\r\n                                  errorMessage =\r\n                                    \"Please check your information and try again.\";\r\n                                } else if (res.status === 400) {\r\n                                  errorMessage =\r\n                                    \"Invalid information provided. Please check your details.\";\r\n                                } else if (res.status === 401) {\r\n                                  errorMessage =\r\n                                    \"Session expired. Please login again.\";\r\n                                } else if (res.status === 403) {\r\n                                  errorMessage =\r\n                                    \"You do not have permission to perform this action.\";\r\n                                } else if (res.status === 409) {\r\n                                  errorMessage =\r\n                                    \"This information is already in use. Please use different details.\";\r\n                                } else if (res.status >= 500) {\r\n                                  errorMessage =\r\n                                    \"Server error. Please try again later.\";\r\n                                } else {\r\n                                  errorMessage =\r\n                                    errorData.message ||\r\n                                    \"Failed to update profile. Please try again.\";\r\n                                }\r\n                              } catch (parseError) {\r\n                                errorMessage = `Request failed with status ${res.status}. Please try again.`;\r\n                              }\r\n\r\n                              throw new Error(errorMessage);\r\n                            }\r\n\r\n                            const result = await res.json();\r\n                            toast.success(\r\n                              \"Profile updated successfully!\",\r\n                            \r\n                            );\r\n\r\n                            // Redirect to dashboard after successful profile update\r\n                            setTimeout(() => {\r\n                              const returnUrl = \r\n                                (typeof window !== 'undefined' && new URLSearchParams(window.location.search).get('returnTo'))\r\n                                  || '/profile?mode=view';\r\n                              router.push(returnUrl);\r\n                            }, 1500);\r\n                          } catch (err) {\r\n                            toast.error(\r\n                              err?.message ||\r\n                                \"Failed to update profile. Please try again.\"\r\n                            );\r\n                          } finally {\r\n                            setSubmitting(false);\r\n                          }\r\n                        }}\r\n                        disabled={submitting || !validateStep(currentStep)}\r\n                        className=\"w-full py-4 bg-gradient-to-r from-green-800 to-green-900 text-white rounded-xl font-heading text-lg hover:from-green-700 hover:to-green-900 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-4 focus:ring-green-100 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 cursor-pointer\"\r\n                      >\r\n                        {submitting ? (\r\n                          <>\r\n                            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2 inline\"></div>\r\n                            Saving Profile...\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            {mode === 'create' ? 'Complete Profile' : 'Update Profile'}\r\n                            <svg\r\n                              className=\"w-5 h-5 ml-2 inline\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeWidth=\"2\"\r\n                                d=\"M5 13l4 4L19 7\"\r\n                              />\r\n                            </svg>\r\n                          </>\r\n                        )}\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* Sidebar: Resources / Help */}\r\n          <aside className=\"lg:col-span-3 space-y-5 lg:sticky lg:top-0 lg:-mt-30 self-start\">\r\n            {/* Start/Create Broker Profile CTA */}\r\n            <div className=\"rounded-xl border border-gray-200 bg-white p-4\">\r\n              <div className=\"flex items-start gap-3\">\r\n                <div className=\"w-8 h-8 rounded-lg bg-blue-50 text-blue-600 flex items-center justify-center\">\r\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"/><circle cx=\"12\" cy=\"7\" r=\"4\"/></svg>\r\n            </div>\r\n                <div className=\"min-w-0 flex-1\">\r\n                  <h3 className=\"text-sm font-semibold text-gray-900\">Create broker profile</h3>\r\n                  <p className=\"text-sm text-gray-600 mt-1\">Finish basic details and choose your nearest region to get started.</p>\r\n                  <div className=\"mt-3\">\r\n                    {(() => {\r\n                      const steps = Array.from({ length: totalSteps }, (_, i) => i + 1);\r\n                      return (\r\n                        <div className=\"w-full\">\r\n                          <div className=\"flex items-center px-2\">\r\n                            {steps.map((step, idx) => {\r\n                              const isActive = step === currentStep;\r\n                              const isCompleted = step < currentStep;\r\n                              const circleClass = isCompleted\r\n                                ? \"bg-green-700 text-white\"\r\n                                : isActive\r\n                                ? \"bg-blue-600 text-white ring-4 ring-blue-100\"\r\n                                : \"bg-gray-400 text-white\";\r\n                              return (\r\n                                <React.Fragment key={step}>\r\n                                  <button type=\"button\" onClick={() => goToStep(step)} className={`w-7 h-7 rounded-full flex items-center justify-center text-[11px] font-bold ${circleClass} cursor-pointer`}>{step}</button>\r\n                                  {idx < steps.length - 1 && (\r\n                                    <div className=\"flex-1 h-1 bg-gray-200 rounded-full mx-2\" />\r\n                                  )}\r\n                                </React.Fragment>\r\n                              );\r\n                            })}\r\n              </div>\r\n            </div>\r\n                      );\r\n                    })()}\r\n                   \r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Profile Summary */}\r\n            <div className=\"rounded-xl border border-gray-200 bg-white p-4\">\r\n              <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Profile summary</h3>\r\n              <div className=\"space-y-2 text-sm text-gray-700\">\r\n                <div className=\"flex justify-between\"><span>Status</span><span className=\"font-medium\">{userRole === \"customer\" ? (customerFormData?.name ? \"In progress\" : \"New\") : (brokerFormData?.name ? \"In progress\" : \"New\")}</span></div>\r\n                <div className=\"flex justify-between\"><span>Name</span><span className=\"font-medium truncate max-w-[140px]\">{userRole === \"customer\" ? (customerFormData?.name || \"—\") : (brokerFormData?.name || \"—\")}</span></div>\r\n                <div className=\"flex justify-between\"><span>Email</span><span className=\"font-medium truncate max-w-[140px]\">{userRole === \"customer\" ? (customerFormData?.email || \"—\") : (brokerFormData?.email || \"—\")}</span></div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Nearest Regions preview */}\r\n            <div className=\"rounded-xl border border-gray-200 bg-white p-4\">\r\n              <div className=\"flex items-center justify-between mb-3\">\r\n                <h3 className=\"text-sm font-semibold text-gray-900\">Nearest regions</h3>\r\n                <button type=\"button\" className=\"text-xs text-blue-700 hover:underline\" onClick={() => setNearestMode?.(true)}>Use nearest</button>\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                {(Array.isArray(nearestRegions) ? nearestRegions.slice(0,3) : []).map((r) => {\r\n                  const id = r._id || r.id;\r\n                  const name = r.name || r.region || \"Region\";\r\n                  const dist = typeof r.distanceKm === \"number\" ? r.distanceKm : null;\r\n                  const distanceText = dist !== null ? `${dist >= 10 ? Math.round(dist) : Math.round(dist * 10) / 10} km` : \"\";\r\n                  return (\r\n                    <div key={id || name} className=\"flex items-center justify-between text-sm\">\r\n                      <div className=\"truncate max-w-[160px] text-gray-700\">{name}</div>\r\n                      <div className=\"text-xs text-gray-500\">{distanceText}</div>\r\n                    </div>\r\n                  );\r\n                })}\r\n                {(!nearestRegions || nearestRegions.length === 0) && (\r\n                  <div className=\"text-sm text-gray-500\">Turn on location to fetch nearby regions.</div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tips */}\r\n            <div className=\"rounded-xl border border-gray-200 bg-white p-4\">\r\n              <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Tips</h3>\r\n              <ul className=\"text-sm text-gray-600 list-disc pl-5 space-y-2\">\r\n                <li>Fill personal info first, then regions.</li>\r\n                <li>Use nearest regions for quick setup.</li>\r\n                <li>Keep KYC under 10MB per file.</li>\r\n              </ul>\r\n            </div>\r\n\r\n         \r\n          </aside>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ProtectedRoute>\r\n  );\r\n};\r\n\r\nexport default function Page() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Profile />\r\n    </Suspense>\r\n  );\r\n}\r\n","'use client';\r\n\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function ViewModeProfile() {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [preview, setPreview] = useState({ open: false, src: '', type: '' });\r\n\r\n  const toPublicUrl = (raw) => {\r\n    if (!raw || typeof raw !== 'string') return raw;\r\n    if (raw.startsWith('/opt/lampp/htdocs/')) {\r\n      const filename = raw.split('/').pop();\r\n      return `https://broker-adda-be.algofolks.com/uploads/${filename}`;\r\n    }\r\n    if (raw.startsWith('/uploads/')) {\r\n      return `https://broker-adda-be.algofolks.com${raw}`;\r\n    }\r\n    return raw;\r\n  };\r\n\r\n  const isPdfFile = (val) => {\r\n    if (!val) return false;\r\n    if (typeof val === 'string') return /\\.pdf$/i.test(val);\r\n    return false;\r\n  };\r\n  const isImageFile = (val) => {\r\n    if (!val) return false;\r\n    if (typeof val === 'string') return /\\.(png|jpe?g|webp)$/i.test(val);\r\n    return false;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError('');\r\n        const brokerId = user?.userId;\r\n        const token = user?.token || (typeof window !== 'undefined' ? (localStorage.getItem('token') || localStorage.getItem('authToken')) : null);\r\n        if (!brokerId) { setLoading(false); return; }\r\n        const base = process.env.NEXT_PUBLIC_API_URL || '';\r\n        const res = await fetch(`${base}/brokers/${encodeURIComponent(String(brokerId))}`, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...(token ? { Authorization: `Bearer ${token}` } : {})\r\n          }\r\n        });\r\n        if (!res.ok) throw new Error('Failed to load broker');\r\n        const body = await res.json();\r\n        const b = body?.data?.broker || body?.broker || body?.data || body;\r\n        setData(b || null);\r\n      } catch (e) {\r\n        setError('Failed to load profile');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    load();\r\n  }, [user?.userId, user?.token]);\r\n\r\n  const profile = useMemo(() => {\r\n    const nonEmpty = (v) => typeof v === 'string' && v.trim().length > 0 && v !== 'null' && v !== 'undefined';\r\n    const pick = (...vals) => vals.find(nonEmpty) || '';\r\n    const regionsArr = Array.isArray(data?.region) ? data.region : [];\r\n    const joinedRaw = pick(data?.createdAt, data?.joinedAt);\r\n    const joinedDate = joinedRaw ? new Date(joinedRaw) : null;\r\n    return {\r\n      name: pick(data?.name, data?.fullName, 'Unknown'),\r\n      firm: pick(data?.firmName),\r\n      status: pick(data?.status, 'Active'),\r\n      joinedDateFormatted: joinedDate ? joinedDate.toLocaleDateString(undefined, { day: '2-digit', month: 'short', year: 'numeric' }) : '',\r\n      license: pick(data?.licenseNumber),\r\n      regions: regionsArr.map(r => (typeof r === 'string' ? r : r?.name || '')),\r\n      gender: pick(data?.gender),\r\n      image: pick(data?.brokerImage, data?.profileImage, data?.image, '/images/user-1.webp'),\r\n      // contacts\r\n      phone: pick(data?.phone, data?.userId?.phone, data?.mobile),\r\n      whatsapp: pick(data?.whatsappNumber, data?.whatsapp),\r\n      email: pick(data?.email, data?.userId?.email),\r\n      address: pick(data?.address, data?.officeAddress),\r\n      website: pick(data?.website),\r\n      socials: {\r\n        linkedin: pick(data?.socialMedia?.linkedin, data?.linkedin),\r\n        twitter: pick(data?.socialMedia?.twitter, data?.twitter, data?.x),\r\n        instagram: pick(data?.socialMedia?.instagram, data?.instagram),\r\n        facebook: pick(data?.socialMedia?.facebook, data?.facebook)\r\n      },\r\n      // docs\r\n      docs: {\r\n        aadhar: toPublicUrl(pick(data?.kycDocs?.aadhar, data?.documents?.aadhar, data?.aadharCard)),\r\n        pan: toPublicUrl(pick(data?.kycDocs?.pan, data?.documents?.pan, data?.panCard)),\r\n        gst: toPublicUrl(pick(data?.kycDocs?.gst, data?.documents?.gst, data?.gstCertificate)),\r\n        license: toPublicUrl(pick(data?.kycDocs?.brokerLicense, data?.documents?.brokerLicense, data?.brokerLicense)),\r\n        companyId: toPublicUrl(pick(data?.kycDocs?.companyId, data?.documents?.companyId, data?.companyId))\r\n      }\r\n    };\r\n  }, [data]);\r\n\r\n  const DocRow = ({ label, value }) => {\r\n    const getExt = (v) => {\r\n      if (!v || typeof v !== 'string') return 'JPG';\r\n      const m = v.match(/\\.([a-zA-Z0-9]+)$/);\r\n      return (m ? m[1] : 'JPG').toUpperCase();\r\n    };\r\n    const ext = getExt(value);\r\n    const disabled = !value;\r\n    const computeFilename = (v, fallbackBase) => {\r\n      if (!v || typeof v !== 'string') return `${fallbackBase}.${ext.toLowerCase()}`;\r\n      try {\r\n        const url = new URL(v, typeof window !== 'undefined' ? window.location.origin : 'https://example.com');\r\n        const last = url.pathname.split('/').pop();\r\n        if (last && last.includes('.')) return last;\r\n        return `${fallbackBase}.${ext.toLowerCase()}`;\r\n      } catch {\r\n        const parts = v.split('/');\r\n        const last = parts[parts.length - 1];\r\n        if (last && last.includes('.')) return last;\r\n        return `${fallbackBase}.${ext.toLowerCase()}`;\r\n      }\r\n    };\r\n    const downloadName = computeFilename(value, label.replace(/\\s+/g, '_'));\r\n    return (\r\n      <div className=\"flex items-center justify-between py-3 border-b last:border-b-0\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <span className=\"w-7 h-7 rounded bg-gray-50 border border-gray-200 flex items-center justify-center\">\r\n            <svg className=\"w-4 h-4 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M7 3h8l4 4v14a2 2 0 01-2 2H7a2 2 0 01-2-2V5a2 2 0 012-2z\"/></svg>\r\n          </span>\r\n          <span className=\"text-sm text-gray-800\">{label}</span>\r\n          <span className=\"ml-2 text-[10px] px-1.5 py-0.5 rounded border border-gray-300 text-gray-600 bg-white\">{value ? ext : '-'}</span>\r\n        </div>\r\n        <div className=\"flex items-center gap-3\">\r\n          <button\r\n            disabled={disabled}\r\n            onClick={() => setPreview({ open: true, src: value, type: isPdfFile(value) ? 'pdf' : (isImageFile(value) ? 'image' : '') })}\r\n            className={`inline-flex items-center gap-1.5 text-xs px-3 py-1 rounded border ${disabled ? 'text-gray-400 border-gray-200 cursor-not-allowed bg-white' : 'text-gray-700 border-gray-300 bg-white hover:bg-gray-50'}`}\r\n          >\r\n            <svg className={`w-3.5 h-3.5 ${disabled ? 'text-gray-300' : 'text-green-600'}`} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>\r\n            Preview\r\n          </button>\r\n          <button\r\n            disabled={disabled}\r\n            onClick={async () => {\r\n              if (!disabled && value) {\r\n                try {\r\n                  const response = await fetch(value);\r\n                  const blob = await response.blob();\r\n                  const url = window.URL.createObjectURL(blob);\r\n                  const link = document.createElement('a');\r\n                  link.href = url;\r\n                  link.download = downloadName;\r\n                  document.body.appendChild(link);\r\n                  link.click();\r\n                  document.body.removeChild(link);\r\n                  window.URL.revokeObjectURL(url);\r\n                } catch (error) {\r\n                  console.error('Download failed:', error);\r\n                  // Fallback to direct link\r\n                  const link = document.createElement('a');\r\n                  link.href = value;\r\n                  link.download = downloadName;\r\n                  document.body.appendChild(link);\r\n                  link.click();\r\n                  document.body.removeChild(link);\r\n                }\r\n              }\r\n            }}\r\n            className={`inline-flex items-center gap-1.5 text-xs px-3 py-1 rounded border ${disabled ? 'pointer-events-none text-gray-400 border-gray-200 bg-white' : 'text-gray-700 border-gray-300 bg-white hover:bg-gray-50'}`}\r\n          >\r\n            <span className=\"inline-flex items-center justify-center w-4 h-4 rounded border border-gray-300 text-[10px] text-gray-600\">D</span>\r\n            Download\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full mx-auto\">\r\n      {/* Broker Information */}\r\n      <div className=\"bg-white rounded-2xl border border-gray-200 shadow-sm mb-6 p-6\">\r\n        {loading ? (\r\n          <div className=\"animate-pulse flex items-center gap-4\">\r\n            <div className=\"w-16 h-16 rounded-full bg-gray-200\" />\r\n            <div className=\"flex-1 space-y-2\">\r\n              <div className=\"h-4 bg-gray-200 rounded w-32\" />\r\n              <div className=\"h-3 bg-gray-200 rounded w-64\" />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {/* Action bar */}\r\n            <div className=\"flex items-center justify-end mb-4\">\r\n              <button type=\"button\" onClick={() => router.push('/profile?mode=edit')} className=\"inline-flex items-center gap-2 px-3.5 py-1.5 rounded-lg text-white bg-green-600 hover:bg-green-700 text-xs font-medium\">\r\n                <svg className=\"w-3.5 h-3.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth=\"2\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"/></svg>\r\n                Edit\r\n              </button>\r\n            </div>\r\n\r\n            {/* Top row */}\r\n            <div className=\"flex items-center gap-4 mb-6\">\r\n              <img src={profile.image} alt=\"Profile\" className=\"w-16 h-16 rounded-full object-cover\" />\r\n              <div>\r\n                <div className=\"text-base font-semibold text-gray-900\">{profile.name}</div>\r\n                <div className=\"text-sm text-gray-600\">{profile.firm || '-'}</div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Info grid */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-6 text-sm\">\r\n              <div>\r\n                <div className=\"text-gray-500\">Firm</div>\r\n                <div className=\"text-gray-900\">{profile.firm || '-'}</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-gray-500\">Gender</div>\r\n                <div className=\"text-gray-900\">{profile.gender || '-'}</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-gray-500\">Status</div>\r\n                <div className=\"inline-flex items-center gap-2 text-green-700 bg-green-50 border border-green-200 px-2.5 py-0.5 rounded-full\">{profile.status || 'Active'}</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-gray-500\">Joined Date</div>\r\n                <div className=\"text-gray-900\">{profile.joinedDateFormatted || '-'}</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-gray-500\">License</div>\r\n                <div className=\"text-gray-900\">{profile.license || '-'}</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"text-gray-500\">Regions</div>\r\n                <div className=\"text-gray-900\">{profile.regions?.length ? profile.regions.join(', ') : '-'}</div>\r\n              </div>\r\n              <div className=\"md:col-span-3 lg:col-span-6\">\r\n                <div className=\"text-gray-500 mb-1\">Specializations</div>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {Array.isArray(data?.specializations) && data.specializations.length > 0 ? (\r\n                    data.specializations.map((s) => (\r\n                      <span key={s} className=\"px-2.5 py-1 rounded-full bg-gray-50 border border-gray-200 text-xs text-gray-800\">{s}</span>\r\n                    ))\r\n                  ) : (\r\n                    <span className=\"px-2.5 py-1 rounded-full bg-gray-50 border border-gray-200 text-xs text-gray-800\">-</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* Contact + Documents */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6\">\r\n        {/* Contact Details */}\r\n        <div className=\"lg:col-span-7 bg-white rounded-2xl border border-gray-200 shadow-sm p-6\">\r\n          <div className=\"text-base font-semibold text-gray-900 mb-4\">Contact Details</div>\r\n          <div className=\"space-y-4 text-sm\">\r\n            <div className=\"flex items-start gap-3\">\r\n              <span className=\"w-6 h-6 rounded bg-gray-100 border border-gray-200 flex items-center justify-center\">\r\n                <svg className=\"w-3.5 h-3.5 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M22 16.92V21a2 2 0 01-2.18 2A19.86 19.86 0 013 5.18 2 2 0 015 3h4.09a1 1 0 01.95.68l1.1 3a1 1 0 01-.27 1.11L9.91 9.91a16 16 0 006.18 6.18l2.12-2.12a1 1 0 011.11-.27l3 1.1a1 1 0 01.68.95z\"/></svg>\r\n              </span>\r\n              <div>\r\n                <div className=\"text-gray-500\">Mobile</div>\r\n                <div className=\"text-gray-900\">{profile.phone || '-'}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start gap-3\">\r\n              <span className=\"w-6 h-6 rounded bg-gray-100 border border-gray-200 flex items-center justify-center\">\r\n                <svg className=\"w-3.5 h-3.5 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M21.5 13.5a4.5 4.5 0 01-6 4.24L9 20l2.26-6.5A4.5 4.5 0 1115 8.5\"/></svg>\r\n              </span>\r\n              <div>\r\n                <div className=\"text-gray-500\">WhatsApp</div>\r\n                <div className=\"text-gray-900\">{profile.whatsapp || '-'}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start gap-3\">\r\n              <span className=\"w-6 h-6 rounded bg-gray-100 border border-gray-200 flex items-center justify-center\">\r\n                <svg className=\"w-3.5 h-3.5 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M4 4h16v16H4z\"/><path d=\"M22 6l-10 7L2 6\"/></svg>\r\n              </span>\r\n              <div>\r\n                <div className=\"text-gray-500\">Email</div>\r\n                <div className=\"text-gray-900 break-all\">{profile.email || '-'}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start gap-3\">\r\n              <span className=\"w-6 h-6 rounded bg-gray-100 border border-gray-200 flex items-center justify-center\">\r\n                <svg className=\"w-3.5 h-3.5 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M3 10l9-7 9 7v10a2 2 0 01-2 2H5a2 2 0 01-2-2z\"/></svg>\r\n              </span>\r\n              <div>\r\n                <div className=\"text-gray-500\">Office Address</div>\r\n                <div className=\"text-gray-900\">{profile.address || '-'}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-start gap-3\">\r\n              <span className=\"w-6 h-6 rounded bg-gray-100 border border-gray-200 flex items-center justify-center\">\r\n                <svg className=\"w-3.5 h-3.5 text-gray-600\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M12 2a10 10 0 100 20 10 10 0 000-20z\"/><path d=\"M2 12h20M12 2a15.3 15.3 0 010 20\"/></svg>\r\n              </span>\r\n              <div>\r\n                <div className=\"text-gray-500\">Website</div>\r\n                <div className=\"text-green-700\">{profile.website ? (<a href={profile.website} target=\"_blank\" rel=\"noreferrer\" className=\"underline\">{profile.website}</a>) : '-'}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {(profile.socials.linkedin || profile.socials.twitter || profile.socials.instagram || profile.socials.facebook) && (\r\n            <div className=\"mt-4 flex items-center gap-3 text-gray-600\">\r\n              {profile.socials.linkedin && (\r\n                <a href={profile.socials.linkedin} target=\"_blank\" rel=\"noreferrer\" aria-label=\"LinkedIn\" className=\"hover:text-gray-900\">\r\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M4.98 3.5C4.98 4.88 3.86 6 2.5 6S0 4.88 0 3.5 1.12 1 2.5 1 4.98 2.12 4.98 3.5zM.5 8h4V24h-4zM8.5 8h3.8v2.2h.05c.53-1 1.83-2.2 3.77-2.2 4.03 0 4.78 2.65 4.78 6.1V24h-4v-6.9c0-1.65-.03-3.77-2.3-3.77-2.3 0-2.65 1.79-2.65 3.65V24h-4z\"/></svg>\r\n                </a>\r\n              )}\r\n              {profile.socials.twitter && (\r\n                <a href={profile.socials.twitter} target=\"_blank\" rel=\"noreferrer\" aria-label=\"Twitter\" className=\"hover:text-gray-900\">\r\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M23 3a10.9 10.9 0 01-3.14 1.53A4.48 4.48 0 0012 7v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z\"/></svg>\r\n                </a>\r\n              )}\r\n              {profile.socials.instagram && (\r\n                <a href={profile.socials.instagram} target=\"_blank\" rel=\"noreferrer\" aria-label=\"Instagram\" className=\"hover:text-gray-900\">\r\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M7 2C4.24 2 2 4.24 2 7v10c0 2.76 2.24 5 5 5h10c2.76 0 5-2.24 5-5V7c0-1.66-1.34-3-3-3h10zm-5 3a5 5 0 100 10 5 5 0 000-10zm0 2a3 3 0 110 6 3 3 0 010-6zm5.5-.75a1.25 1.25 0 11-2.5 0 1.25 1.25 0 012.5 0z\"/></svg>\r\n                </a>\r\n              )}\r\n              {profile.socials.facebook && (\r\n                <a href={profile.socials.facebook} target=\"_blank\" rel=\"noreferrer\" aria-label=\"Facebook\" className=\"hover:text-gray-900\">\r\n                  <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M22 12a10 10 0 10-11.5 9.95v-7.04H7.9V12h2.6V9.8c0-2.57 1.53-3.99 3.87-3.99 1.12 0 2.29.2 2.29.2v2.52h-1.29c-1.27 0-1.66.79-1.66 1.6V12h2.83l-.45 2.91h-2.38v7.04C19.55 21.47 22 17.1 22 12z\"/></svg>\r\n                </a>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Documents */}\r\n        <div className=\"lg:col-span-5 bg-white rounded-2xl border border-gray-200 shadow-sm p-6\">\r\n          <div className=\"text-base font-semibold text-gray-900 mb-4\">Documents</div>\r\n          <div className=\"divide-y divide-gray-100\">\r\n            {[\r\n              { label: 'Aadhar Card', value: profile.docs.aadhar },\r\n              { label: 'PAN Card', value: profile.docs.pan },\r\n              { label: 'GST Certificate', value: profile.docs.gst },\r\n              { label: 'Broker License', value: profile.docs.license },\r\n              { label: 'Company ID', value: profile.docs.companyId },\r\n            ].map(({ label, value }) => {\r\n              const getExt = (v) => {\r\n                if (!v || typeof v !== 'string') return '-';\r\n                const m = v.match(/\\.([a-zA-Z0-9]+)$/);\r\n                return (m ? m[1] : '-').toUpperCase();\r\n              };\r\n              const ext = getExt(value);\r\n              const disabled = !value;\r\n              const fileName = (() => {\r\n                if (!value) return label.replace(/\\s+/g, '_');\r\n                try {\r\n                  const u = new URL(value, typeof window !== 'undefined' ? window.location.origin : 'https://example.com');\r\n                  const last = u.pathname.split('/').pop();\r\n                  if (last && last.includes('.')) return last;\r\n                } catch {}\r\n                return `${label.replace(/\\s+/g, '_')}${ext !== '-' ? `.${ext.toLowerCase()}` : ''}`;\r\n              })();\r\n              return (\r\n                <div key={label} className=\"flex items-center justify-between py-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"flex h-7 w-7 items-center justify-center rounded-md border border-gray-200 bg-white text-gray-500\">\r\n                      <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M7 3h8l4 4v14a2 2 0 01-2 2H7a2 2 0 01-2-2V5a2 2 0 012-2z\"/></svg>\r\n                    </div>\r\n                    <span className=\"text-sm font-medium text-gray-900\">{label}</span>\r\n                    <span className=\"ml-2 text-xs px-2 py-0.5 border border-gray-200 rounded bg-gray-50 text-gray-700\">{ext}</span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-3\">\r\n                    {disabled ? (\r\n                      <span className=\"text-sm text-gray-400 flex items-center gap-1.5\">\r\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>\r\n                        Preview\r\n                      </span>\r\n                    ) : (\r\n                      <a href={value} target=\"_blank\" rel=\"noreferrer\" className=\"text-sm text-emerald-600 hover:text-emerald-700 flex items-center gap-1.5\">\r\n                        <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\"><path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>\r\n                        Preview\r\n                      </a>\r\n                    )}\r\n                    {disabled ? (\r\n                      <span className=\"text-sm border border-gray-200 px-2.5 py-1.5 rounded-md text-gray-400 flex items-center gap-1.5\">\r\n                        <span className=\"inline-flex items-center justify-center w-4 h-4 rounded border border-gray-300 text-[10px]\">D</span>\r\n                        Download\r\n                      </span>\r\n                    ) : (\r\n                      <button \r\n                        onClick={async () => {\r\n                          try {\r\n                            const response = await fetch(value);\r\n                            const blob = await response.blob();\r\n                            const url = window.URL.createObjectURL(blob);\r\n                            const link = document.createElement('a');\r\n                            link.href = url;\r\n                            link.download = fileName;\r\n                            document.body.appendChild(link);\r\n                            link.click();\r\n                            document.body.removeChild(link);\r\n                            window.URL.revokeObjectURL(url);\r\n                          } catch (error) {\r\n                            console.error('Download failed:', error);\r\n                            // Fallback to direct link\r\n                            const link = document.createElement('a');\r\n                            link.href = value;\r\n                            link.download = fileName;\r\n                            document.body.appendChild(link);\r\n                            link.click();\r\n                            document.body.removeChild(link);\r\n                          }\r\n                        }}\r\n                        className=\"text-sm border border-gray-200 px-2.5 py-1.5 rounded-md text-gray-700 hover:bg-gray-50 flex items-center gap-1.5 cursor-pointer\"\r\n                      >\r\n                        <span className=\"inline-flex items-center justify-center w-4 h-4 rounded border border-gray-300 text-[10px]\">D</span>\r\n                        Download\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"text-xs text-red-600 mt-6\">{error}</div>\r\n      )}\r\n\r\n      {/* Preview Modal */}\r\n      {preview.open && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60 p-4\" onClick={() => setPreview({ open: false, src: '', type: '' })}>\r\n          <div className=\"bg-white rounded-xl max-w-4xl w-full overflow-hidden\" onClick={(e) => e.stopPropagation()}>\r\n            <div className=\"flex items-center justify-between px-4 py-3 border-b\">\r\n              <div className=\"text-sm font-medium text-gray-900\">Preview</div>\r\n              <button className=\"text-gray-600 hover:text-gray-900\" onClick={() => setPreview({ open: false, src: '', type: '' })}>✕</button>\r\n            </div>\r\n            <div className=\"p-4 max-h-[80vh] overflow-auto\">\r\n              {preview.type === 'pdf' ? (\r\n                <iframe src={preview.src} className=\"w-full h-[70vh]\" title=\"Document Preview\" />\r\n              ) : (\r\n                <img src={preview.src} alt=\"Document\" className=\"max-h-[70vh] w-auto mx-auto\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}